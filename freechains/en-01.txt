=== 1

Freechains is a peer-to-peer content dissemination system.

==== 2

Content here * refers to all kind of information and interactions on the
internet.
E-mail exchanges, consuming news, social media interactions, and even making
backups of documents ... or using mobile apps, for example, to order food and
taxi.

This content needs to be disseminated between the participants somehow.
So *, for example, a news site will deliver content to many consummers,
following a "1 to N" pattern.
If the site supports comments * and feedback, then the dissemination will be
in the opposite direction: "N to 1".

An e-mail * exchange follows the "1 to 1" pattern and a public * forum with
many people communicating will follow a "N to N" dissemination pattern.
It's also possible to have a single * producer and consumer for the same
information, such as for backup of files.

Our idea with Freechains is to offer these communication patterns using the
same protocol, the same set of commands and APIs.

Freechains also wants to offer these services in a peer-to-peer architecure,
that is:
    - without * intermediates or a pre-determined central server
    - without * a central authority that controls the access to content
    - and, without * the need of trust among participants

=== 3

The internet today is controlled by very * few companies:
- And they control * our public information
- Collect * our private data, even if we don't want
- They also decide * a large part of what we will consume of information.
- In many cases, their services need * permanent connectivity, even for
  information that we already consumed once.
- Also, the protocols * and data formats are closed, what prevents data
  portabilibty and integration with third-party services.

=== 4

- The internet today is extremelly centralized *, very different of how it was
  first idealized and to some degree practiced fifteen to twenty years ago.
- Today there is a large centralization of data *, infra-structure *, and
  power * ... and in the hands of few companies.

=== 5

And if we want to decentralize content dissemination services, it's interesting
to first understand better the current communication patterns.

Here *, we classify the patterns in 3 groups.
The first * refers to a public identity of a participant, usually a content
broadcaster.
They are news sites, streaming services, websites, and public profiles in
social media.
The second group * comprises private communications in ... pairs, groups or
individual.
The third group * refers to public forums, such as Q&A sites, chats, and
public commerce.
The last group is much more complex since the peers do not know each other and
in many situations, we have to deal with malcious users.

Taking the first * groups as an example of dissemination, a public * identity
wants to broadcast content to a target * of interest.
This content * may be understood as a sequence of messages * in time.
The subscribers may also provide some feedback * to the author.

=== 6

In a cetralized system such as Facebok *, the dissemination is always
itermediated *.
The service controls your identity and content and forwards * to other users,
which also interact with intermediation * of the service.

In addition to our identity *, we need other levels of trust on the centralized
service:
- that it will exist * and be available continually
- that the messages * I send and receive will in fact be delivered
- that the content * I do not choose, for example ads and recommendations,
  will be appropriate
- and still * other issues with fake news and illegal content

=== 7

So, is it possible do decentralize these content dissemination patterns?
There are * several issues in networked systems that need to be addressed.

- For example, can * peers exchange messages?
The issue with availability is not * a problem in decentralized systems,
exactly because they do not have a single point of failure.

- The basics * of information security are very important when peers do not
  trust each other.
  But public key * cryptography solved this issue a long time ago.

- The hardest * are the last three itens, specially for the * N-to-N pattern in
 public forums, where there's no mediator of trust among the peers.
- How to * make sure that all peers receive all messages and in a consistent
  order?
- How to * make sure that participans can communicate with each other?
- And how to * make sure that the most important messages are higlighted and at
  the same time that message in excess, SPAM, fake news, and illegal content do
  not take over?

- To answer these questions *, we propose with Freechains a decentralized
  reputation systems for messages and authors.
The participans evaluate the messages with likes and dislikes and the
reputation system is applied automatically by the protocol, possibily blocking
certain messages and highlighting others.

=== 8

Now let's look closer to the N-to-N communication in public forums.

=== 9

The communication varies with time * and also with the presence * of users
posting new content.
Here *, a user posts a question and two * other * users respond.
Then *, a new question appears and then * other question, this is answered *,
which receives * a question on top.
And this * goes on *...

In a centralized system, such as Stack Overflow, these posts can be projected
* * * * over time and ordered * by arrival time.
It's easy * to obtain a total order of messages in a centralized system.
With total order, each message has exactly the same position in all peers.

=== 10-11

But in a decentralized * system, issues such as latency and connectivity <*>
can lead to different orders of delivery * in each pair * of the network *.
Hence, * how to synchronize these peers over time?
How to determine what each peer has received and not received?
And how can we make sure that all delivery orders do not break any consistency
rule?
For example, that an answers always arrives after its corresponding question?

=== 12

O Bitcoin também é uma rede de disseminação de conteúdo "N pra N" que resolveu
esse problema de consenso * distribuído utilizando o conceito de
"Prova de Trabalho Computacional". *

Aqui a gente tem três pares, cada um com uma ordem de recebimento diferente.
Não vamos explicar o protocolo aqui, mas o importante * é que o Bitcoin
consegue que os pares entrem em consenso * e escolham uma ordem total * entre
os eventos.
O Bitcoin resolve * um problema central de inconsistência distribuída que no
seu contexto permitiria um usuário gastar o mesmo dinheiro múltiplas vezes.

No entanto *, a prática mostra uma enorme concentração de poder computacional
em poucos nós, o que é uma ameaça em potencial pra evolução do sistema.
Esses nós podem controlar o conteúdo dos blocos e em teoria podem negar
transações arbitrariamente, por exemplo.
A ordem total * de eventos é uma garantia muito forte que talvez não seja
necessária em muitos contextos de disseminação.

Uma outra questão * que não se aplica ao BitCoin é a qualidade das mensagens.
O bitcoin apenas transfere valores quantitativos, não havendo nenhuma questão
subjetiva a ser levada em conta.
É um problema diferente do que estamos abordando com o Freechains.

=== 13

As DHTs, tabelas hash distribuídas, são uma outra técnica adotada em
sistemas peer-to-peer.
É a base do BitTorrent, IPFS e outros sistemas mais modernos.

Cada conteúdo da rede é associado a um identificador único.
Com esse identificador, a DHT consegue localizar o conteúdo de forma rápida * e
escalável

É um mecanismo muito eficiente * pra disseminar conteúdos grandes e populares.
Por exemplo, filmes e software.

No entanto *, como o identificador tem que já ser conhecido, é difícil fazer
buscas e também descobrir * novos conteúdos.
Arquivos menos populares * também tem dificuldade de acesso.

E um grande desafio * de DHTs é o de manter incentivos suficientes pra que os
pares permaneçam armazenando e disseminando os seus arquivos.

=== 14

Voltando à comunicação N pra N em fórums públicos...
O Freechains *, pra obter consenso, respeita somente um relação de causalidade
entre as postagens.
Por exemplo, uma pergunta deve sempre ser recebida antes das suas respostas.
Em outras palavras, o Freechains vai sempre respeitar a ordem das setas que
aparecem no gráfico em todos os nós da rede.
Mas postagens sem relação de causalidade * como essas duas, podem ser recebidas
em ordens diferentes pelos nós da rede.

Além disso *, o protocolo também conta com uma estratégia de "melhor esforço",
ou seja, quando um nó posta um conteúdo novo *, ele automaticamente aponta
pra o conteúdo que ele já viu...
...mesmo que não exista * uma relação semântica entre eles *.
Ainda sim, haverá casos * de postagens que podem ser recebidas em ordens
diferentes, o que faz com que o Freechains garanta apenas uma ordem parcial *
dos acontecimentos.

É importante reforçar que essa estratégia de melhor esforço não oferece muitas
garantias temporais para eventos independentes.
Por exemplo *, vamos considerar essa nova postagem aqui em verde * que nenhum nó
havia visto ainda. Ela só aponta pra uma postagem muito antiga.
Não é possível determinar quando ela realmente ocorreu *, pois existe todo esse
espaço de tempo possível.
A gente não sabe se a postagem vem de um nó que estava muito tempo desconectado
ou se é uma postagem que optou em ignorar a estratégia de melhor esforço por
alguma razão.
Iremos discutir essas considerações mais pra frente.

=== 14

Na segunda parte desse vídeo, vamos apresentar o Freechains de maneira mais
concreta.
