=== 01

Essa é a quarta parte do vídeo.

=== 02

No vídeo anterior, a gente mencionou que as postagens de um autor devem
formar uma lista encadeada, ou seja, não podem haver múltiplos caminhos entre
duas postagens de um autor.
Essa restição evita que o autor possa gastar a mesma reputação duas vezes.

Vamos ilustrar a situação de "gasto duplo" no Freechains *.
Um autor aqui * já possui uma reputação prévia de +1 rep.
A regra geral do Freechains * é de uma árvore, então esse autor poderia usar *
a sua reputação em dois caminhos diferentes.
No caminho de cima * ele dá um like em uma postagem, e no de baixo * em outra
postagem e assim gasta a sua única reputação duas vezes.

Por isso *, o Freechains exige que os blocos de autores formem uma lista
encadeada.

A mesma situação * pode aparecer de maneira menos artificial com dois hosts
diferentes. Ao sincronizar os hosts *, a mesma situação aparece.

É responsabilidade dos autores * manterem as suas postagens em sequência, o que
pode ser feito sem muita dificuldade usando o mesmo host pra postagens ou
dando o intervalo necessário pra as suas postagens se propagarem na rede.

Caso a regra seja quebrada, * a sub-árvore com mais blocos à frente das
postagens conflitante vai prevalecer e a outra sub-arvore é inteiramente
removida da cadeia.

=== 03

Aqui * nós temos essa situação.
Os dois hosts têm postagens de um autor e essas postagens já foram
referenciadas por outras postagens.
No momento do envio *, o recebedor vai detectar a inconsistência e vai rejeitar
* inteiramente a sua própria sub-arvore que sucede a postagem, como se elas
nunca tivessem existido.

Esse efeito é análogo a um fork no BitCoin que segue a cadeia mais longa.
No Freechains, a cadeia com mais blocos é a com mais trabalho associado e por
isso prevalece.

Voltando ao exemplo, infelizmente, a única solução viável aqui * é o retrabalho
por parte dos autores que tiveram seus blocos removidos, pois as postagens
terão que ser assinadas * novamente para apontar para os novos blocos.

Mesmo considerando autores maliciosos, acreditamos que forks longos, que exijam
a repostagem de muitos blocos, não serão comuns, pois exigem algumas condições:
- o autor malicioso precisa de reputação
- os dois hosts precisam ficar desconectados tempo suficiente pra os forks
  serem significativos
- e os forks só vão ser significativos se os dois hosts desconectados tiverem
  um fluxo considerável de outros autores
- por fim o autor malicioso precisa ainda identificar essa desconexão entre os
  host em tempo

Com isso tudo acontecendo, a pior das hipótese é que algumas postagens poderão
ser perdidas pq alguns autores não irão realizá-las novamente.

=== 04

Agora vamos considerar o caso de um autor malicioso que quer enganar o sistema
de reputação do Freechains para forjar reps.

Na cadeia *, um autor já * possui uma reputação prévia e depois fica 1 semana *
sem atividade * nenhuma.
No oitavo dia *, ele imediatamente * cria diversas postagens em sequencia *,
como se tivesse postado um bloco a cada dia da semana que passou.
Ele pode fazer isso pq ao se sincronizar na rede, os outros hosts não têm como
saber quando cada postagem aconteceu e tem que aceitar os 7 blocos já
consolidados.
Dessa forma, o autor malicioso obtem * +7 reps de uma vez e pode usá-las
imediatamente *.

=== 05

Um outro * ataque em potencial é um autor ignorar os dislikes que vier a
receber.
Aqui *, até esse momento, o autor possui uma postagem e apenas +1 rep.
A cadeia vai crescendo *, e inclui com um dislike * referenciando o post do
autor.
O autor ignora o resto da cadeia * e continua referenciando apenas os seus
posts, que continuam recebendo dislikes *.
Como o autor nunca referencia a história da cadeia *, os dislikes não são
contabilizados e o autor mantem reputação suficiente pra continuar postando
SPAM.
Para o resto da cadeia, esse autor tem uma reputação negativa, mas olhando
apenas a sub-árvore que o autor está postando, o caminho até o bloco gênesis
não possui nenhum dislike.
Então os outros hosts continuam aceitando as postagens.

=== 06

Pra mitigar esses dois ataques, o sistema de reputação do Freechains é
inflacionário: quanto mais blocos existirem em uma sub-árvore, mais reps 


=== 12

Existem algumas questões temporais que também exigem uma discussão.
Considerando * a visão de um host em relação a outros existem 3 * tempos
diferentes com visões diferentes.
- O primeiro é o tempo registrado pelo autor na criação do bloco.
  Esse tempo é igual em qualquer host, mas não é um valor confiável pois foi
  uma escolha do autor. Vamos nos referir a esse tempo como IMMUT.
- O segundo é o tempo de recebimento no host. Esse valor é confiável pra o
  host, pois foi anotado por ele. Mas é um tempo que varia de host pra host.
  Vamos chamar esse tempo de LOCAL
- O terceiro é o tempo corrente no host. Ele também é confiável, mas é dinãmico.
  Vamos chamá-lo de CUR.

*
Na discussão, nós iremos assumir que os autores e hosts podem ser maliciosos.

Existem 3 * constantes de tempo definidas no protocolo do Freechains:
- Há uma tolerância de 30 minutos com blocos marcados pelo autor no futuro
  em relação ao host. Esse tempo * afeta quais blocos vão estar disponíveis na
  cadeia local do host
- O tempo de quarentena * afeta os blocos que começam a ser referenciados na
  cadeia.
- E o tempo de consolidação * afeta a reputação dos autores.

=== 13

Vamos começar * pelo tempo de tolerância.
O protocolo * assegura que o tempo atual no host tem que se maior ou igual que
o tempo marcado pelo autor menos essa tolerância de 30 minutos
*
Mas quem pode mentir aqui?

Os hosts * podem mentir o seu tempo atual. Isso não importa muito pois na pior
das hipóteses eles vão rejeitar o bloco, o que eles já podem fazer simplesmente
negando o acesso a uma conexão particular.
Os autores * podem escolher um tempo no futuro de criação em relação à
realidade.
Bom, se é 1 hora no host *, o autor pode dizer que é 1 e meia  * onde ele está
e o host vai ser obrigado a aceitar esse bloco.

Essa tolerância existe pra que o protocolo evite lidar com problemas de
sincronização de relógio. Um autor que mente a hora de criação, arrisca não ter
o seu bloco aceito.
E a gente vai ver nos próximos slides que esses 30 minutos não trazem
necessariamente uma vantagem ao autor.

=== 14

O tempo de quarentena * permite que a cadeia reaja a posts suspeitos antes que
ele comece a ser referenciado e se consolide.
Como já vimos, * o tempo de quarentena se baseia na diferença * entre o tempo
de criação pelo autor e recebimento pelo host *.
Essa diferença é adicionada a 2h * com a sua raíz quadrada.
Tem um detalhe a mais omitido que a diferença na verdade usa os tempos dos
links e não os tempos do bloco.
O tempo do autor considera o máximo entre os seus links anteriores *, aqui
representado pelo bloco B.
E o tempo local considera o máximo entre as cabeças do host, aqui representado
pelo bloco X.
Esses tempos são menos dependentes dos autores e hosts e dão mais
confiabilidade a cadeia como veremos a seguir.

O tempo de quarentena * é então expirado quando o tempo atual no host supera
o tempo de recebimento mais o fator de quarentena.

*
E quem pode mentir aqui?

Os hosts * novamente podem os seus tempos, o que no máximo não vai permitir que
os blocos sejam aceitos, algo que ele já pode fazer negando o acesso.

Os autores * decidem quais blocos referenciar, mas é mais vantajoso escolher os
blocos mais novos pra dimunir o tempo de quarentena. E isso é o que o
protocolo já faz normalmente.

=== 15

O tempo de consolidação * altera o efeito que uma postagem tem na reputação de
um autor.
Esse efeito depende somente * da diferença entre duas postagens.
Por exemplo, aqui IMMUT' se refere ao tempo de criação de uma nova postagem e
IMMUT se refere a uma postagem anterior.
Se a diferença entre os tempos for superior a 24h então a postagem anterior
vai contar positivamente pra a criação da nova postagem.

*
E quem pode mentir aqui?

O autor * precisa aguardar 24h pra que uma postagem anterior * conte
positivamente.
Só que esse tempo * ainda não chegou.
O autor pode adiantar * o seu relógio pra fingir que o tempo já chegou *.
Assim, * o autor tem um benefício pequeno já que está limitado aos 30 minutos
de tolerância ao futuro.
É importante observar * que os tempos esses tempos são os mesmos em todos os
nós. O autor não vai poder continuar adiantando o seu relógio pra postagens
futuras *, pois vai estourar essa a tolerância.

=== 18

Em resumo

O Freechains é um sistema peer-to-peer pra a disseminação de conteúdo em
comunidades online.

Ele usa uma arquitetura peer-to-peer não estruturada pra a disseminação de
forma decentralizada e pervasiva.

Usa criptografia de chave pública como suporte pra a segurança do conteúdo
disseminado.

Se baseia em uma abordagem social semi-autônoma pra garantir o consenso nas
comunidades e um sistema de reputação que auxilia na igualdade entre os
participantes e na qualidade do conteúdo.
