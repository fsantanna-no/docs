=== 01

Essa é a quarta parte do vídeo.

=== 02

No vídeo anterior, a gente mencionou que as postagens de um autor devem
formar uma lista encadeada, ou seja, não podem haver múltiplos caminhos entre
duas postagens de um autor.
Essa restição evita que o autor possa gastar a mesma reputação duas vezes.

Vamos ilustrar a situação de "gasto duplo" no Freechains *.
Um autor aqui * já possui uma reputação prévia de +1 rep.
A regra geral do Freechains * é de uma árvore, então esse autor poderia usar *
a sua reputação em dois caminhos diferentes.
No caminho de cima * ele dá um like em uma postagem, e no de baixo * em outra
postagem e assim gasta a sua única reputação duas vezes.

Por isso *, o Freechains exige que os blocos de autores formem uma lista
encadeada.

A mesma situação * pode aparecer de maneira menos artificial com dois hosts
diferentes. Ao sincronizar os hosts *, a mesma situação aparece.

É responsabilidade dos autores * manterem as suas postagens em sequência, o que
pode ser feito sem muita dificuldade usando o mesmo host pra postagens ou
dando o intervalo necessário pra as suas postagens se propagarem na rede.

Caso a regra seja quebrada, * a sub-árvore com mais blocos à frente das
postagens conflitante vai prevalecer e a outra sub-arvore é inteiramente
removida da cadeia.

=== 03

Aqui * nós temos essa situação.
Os dois hosts têm postagens de um autor e essas postagens já foram
referenciadas por outras postagens.
No momento do envio *, o recebedor vai detectar a inconsistência e vai rejeitar
* inteiramente a sua própria sub-arvore que sucede a postagem, como se elas
nunca tivessem existido.

Esse efeito é análogo a um fork no BitCoin que segue a cadeia mais longa.
No Freechains, a cadeia com mais blocos é a com mais trabalho associado e por
isso prevalece.

Voltando ao exemplo, infelizmente, a única solução viável aqui * é o retrabalho
por parte dos autores que tiveram seus blocos removidos, pois as postagens
terão que ser assinadas * novamente para apontar para os novos blocos.

Mesmo considerando autores maliciosos, acreditamos que forks longos, que exijam
a repostagem de muitos blocos, não serão comuns, pois exigem algumas condições:
- o autor malicioso precisa de reputação
- os dois hosts precisam ficar desconectados tempo suficiente pra os forks
  serem significativos
- e os forks só vão ser significativos se os dois hosts desconectados tiverem
  um fluxo considerável de outros autores
- por fim o autor malicioso precisa ainda identificar essa desconexão entre os
  host em tempo

Com isso tudo acontecendo, a pior das hipótese é que algumas postagens poderão
ser perdidas pq alguns autores não irão realizá-las novamente.

=== 04

Agora vamos considerar o caso de um autor malicioso que quer enganar o sistema
de reputação do Freechains para forjar reps.

Na cadeia *, um autor já * possui uma reputação prévia e depois fica 1 semana *
sem atividade * nenhuma.
No oitavo dia *, ele imediatamente * cria diversas postagens em sequencia *,
como se tivesse postado um bloco a cada dia da semana que passou.
Ele pode fazer isso pq ao se sincronizar na rede, os outros hosts não têm como
saber quando cada postagem aconteceu e tem que aceitar os 7 blocos já
consolidados.
Dessa forma, o autor malicioso obtem * +7 reps de uma vez e pode usá-las
imediatamente *.

=== 05

Pra mitigar esse ataque, o Freechains adota um sistema inflacionário de
reputação: quanto mais blocos existirem em uma sub-árvore, maior e o valor
unitário de um rep, tanto para usar como para coletar.

Em outras palavras, * a unidade de reputação do Freechains é ajustada conforme
a cadeia cresce.
Para saber o valor de um "rep" *, pega-se a altura atual da cadeia e divide-se
esse valor por 10 arredondando pra cima.
Por exemplo, no início, com altura 1, um rep vale uma unidade.
Com altura 23, um rep vai valer 3 e assim em diante.

Vamos ver um exemplo * na prática.
O número 10 dentro do círculo representa uma sub-árvore com altura 10.
Para postar o X1 que vai entrar com altura 11, o autor vai precisar * de 2
unidades e após 24 vai coletar o mesmo valor.
Depois *, um outro autor quer dar um like * em X1 vai precisar de 3 * unidades,
pois a altura já está acima de 20.
Essa nova * postagem também vai precisar de 3 * unidades para ser postada.

Agora * pegando a tentativa de forjar reps, o usuário malicioso consegue postar
uma quantidade N * limitada de blocos, quando comparada a quantidade M * que o
resto da cadeia vai acumular por uma semana inteira de atividade.
Assim, * como M é muito maior do que N, as unidades adiquiridas com N vão ter
efeito insignificante ao serem usadas sobre a cadeia com M, pois o valor da
unidade será bem maior do que o coletado.
