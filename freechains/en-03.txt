=== 01

This is the third part of the video.

=== 02

There are some challenges * for a decentralized reputation system:
- the excess * of information
- the dissemination * of unsolicited message like ads
- fake * news
- and also illegal * content such as piracy

Freechains offers an autonomous reputation system to control the quality of the
content disseminated in the peer-to-peer network.

rgainst messsages in excess *, Freechains limits the amount of messages by
penalizing new posts without appropriate time spacement.
Also, * likes and dislikes highlight the most relevant content, serving as a
filter against the excess.
These two measures * offer equal opportunities of communication among the peers
and preserve the content quality.

To fight SPAM, fake news, and illegal content, Freechains adopts two measures:
- Require * previous reputation of authors to post.
- And * tracks the reputation of each post, possibliy blocking their contents
  if the number of dislikes superceedes the number of dislikes by a factor of
  two. For example, if a post has 5 likes and 10 dislikes, it will be blocked.

The use of likes and dislikes consumes the reputation of authors, so they are
also a scarce resource that has to be used wisely.

=== 03

The reputation system of Freechains keeps track of likes * and dislikes over
the time which generate "reps", the unit of reputation, for authors and posts.

Reputation * is created, spent and transferred in many forms.
Just at the beginning *, the first author that links a post to the genesis
block is awarded with + 30 reps *.

However, the rule for further posts *, that is, any new content * requires a
previous * reputation and penalizes the author with - 1 rep *.
If the author does not have the reputation *, the block is blocked, here in
red, until it gets a like.

---

Likes e dislikes * transfer reputation between authors.
Here *, the first author gives a like * to the rejected post with the command
"chain like".
A like takes * 1 rep from the source and adds * 1 rep to the target.
A post can also get a dislike *, which removes 1 rep from the source and
target.

The blocked post * now changes its state and can be retransmitted in the
network.

After 24h *, the posts are consolidated * in the chain.
They award the author with + 1 rep at the same time that eliminated the initial
- 1 rep penalty.

This way, in the example *, the author now has a positive reputation after the
first 24 hours.
Now he can use this reputation for new posts or to give likes and dislikes in
other posts.
Consolidadted posts * last 90 days and the rewards never exceed the limit of
+ 30 reps.
Freechains also only rewards at most one post per day.
So, if an author posts 10 messages in a week, only 7 will count positivelly.
This, together with the - 1 rep discount for new posts, limit the number of
posts per author.

=== 04

Now, let's consider a more complete example using the same chain.
A new block *, first is verified by the protocol *:
- if the hash verifies
- if the previous blocks exist
- if the signature verifies
- and, in the case of a like, if the author has reputation

The *, it is accepted immediately if it's the first block or if the author has
reputation.

Here *, the first block is accepted and its author is awarded *.
Blocks * may also not be accepted immediately * and they receive a - 1 * penalty.
Rejected blocks * are not transmitted in the network in the SEND commands.
A further LIKE *, can transfer * reputation and reset * the reputation of the
rejected post, which is now accepted * in the chain.

---

Here in the example *, the first author posts again and spend * another rep.
After one day *, the posts are consolidated in the chain and now count
positivelly for their authors.
The author on top * not just eliminated the - 1 penalty as now counts with the
like it received and its consolidated post, have + 2 reps now.

The author at the bottom * is still ignored by the chain and his blocks do not
get the required likes.
Then *, the author on top, which already has reputation, posts a new content
and spends * 1 rep.

Now *, the first author gives a dislike decrementing * the reputation of itself
and * of the referred author.
Note that the post in yellow has 1 dislike and no likes.
This way *, its content becomes HIDDEN and is not forwared to other peers.
Even so, since it was already accepted, the post continues on the chain, only
the actual content is hidden.
Who already saw the content can give likes and dislikes normally, possibly
affecting the post state again.

After another day *, posts are consolidated, even those * with hidden contents.
The author on top recovers the penalty for his new post and get + 1 rep from
the consolidadtion. But since the post got a dislike, the author remains with
the same reputation of the previous day.

=== 05

Now, let's give more details about the trajectory of a new * block in the
chain.
First *, there are other verifications that take place:
- if the back links, besides existing are accepted and older
- if the creation time is not in the future
- in the case of a first post, if it is unique
- in the case of a like, if it's signed and the author has reputation

Then *, the post is redirected to its initial state:
- it is immediatelly accepted * if it's the first post or if the author has
  reputation. in this state, the post is retransmitted to other hosts e is also
  linked by new blocks
- otherwise *, the block remains blocked * until it gets a like * from others

The contents of accepted blocks can be hidden * at any time.
This happens * whenever the number of dislikes superceedes the number of likes
* by a factor of two.

In the first 24 hours * of a block, it counts negativelly * to its author
reputation.
This prevents that author with little reputation post in excess.
After 24 hours *, the block is consolidated and starts * to count positively
for the author.
Even so, the block is subject to the reputation system and its content might
still be hidden it it gets to many dislikes.

== 06

The reputation of posts and authors are tracked in separate and in a different
way.

For posts *, Freechains counts * the likes and dislikes that appear AFTER the
block.
Here *, we have a post and want to know its reputation.
We only look forward *, and only * for posts that link directly or indirectly
to the block of interest.
Here * the block has a negative reputation because of the two dislikes it gets.

The reputation of posts serves two purpose:
- to indicate * its quality to users of the chain, which can filter or order
  their content consumption
- and to affect * the state of the block, since block with too many dislikes
  have their contents hidden in the chain

A central issue in the reputation system of Freechains is that a block
reputation depends only on what is ahead * of it in time.
This implies that different hosts will diverge temporarily about the actual
state of the block.
For example, this dislike * might not be received in all hosts yet and they
will keep transmiting contents that should be hidden.
This is not a problem because becaus hosts will converge eventually, and blocks
with too many dislikes will be correctly hidden.
It's also important to note that a host cannot choose at will if it will hide
a content or not, because the other peers will demand a proof about the real
state of the block.
In this example, the host will have to show the dislikes which are signed by
other authors.

=== 07

The author reputation * is always evaulated starting from a set of blocks of
reference.
For example, here * we count starting from the last two blocks in the chain.
The reputation will now be counted backwards * down to the genesis * block.

The author reputation will be * the sum of
- his posts * with more than 24 hours
- PLUS * the likes his posts received, MINUS his dislikes
- and yet * MINUS all given likes and dislikes

In the graphic, the author has 3 posts *: X1, X2 and X3.
The vertical line * separates consolidated posts in the chain.
X2 is a dislike * the author spent *.
Hence, only block X1 in green * will count positivelly as consolidated.
X1 also received a like * from another author, which will also count *
positivelly.
X3 is a new post, so * it will count negatively.
In the end, the author will accumulate 0 * reps.

Since we start from the same blocks and go backwards, the hosts will see the
same reputation *.
The chain structure forms a Merkle Tree, which is "tamper proof", that is:
- if a host has received H1 and H2, all previous blocks and only them are part
  of the tree in all hosts.

The author reputation * is verified in two occasions:
- to decide * if a new post will be accepted in the chain
- and to decide * if that author can spend a like or dislike
In both case, the author only requires a positive reputation.

=== 08

Now let's discuss some possible attacks to the reputation system of Freechains
that requires us to make some adjustments.

We start with the possibility of spending the same "reps" mutiple times.
Here, * an author already has a previous reputation.
The general rule of chains is that they form trees *, so this author could
use * its reputation in two different paths.
In the path * above, he likes a post, and below * he likes another post,
spending his single reputation twice.

For this reason, Freechains demands * that authors' posts form a linked list.
The same situation * can appear in a less artificial way with two hosts.
When synchronizing *, the same situation occurs.

It is the responsibility of authors * to keep their posts in sequence.
This can be done easily using the same host to post or giving the needed
interval for new posts to propagate in the network.

If this rule is broken, * the sub-tree with more blocks ahead will prevail and
the other will be entirely removed from the chain.

=== 09

Here * we have this situation.
The two hosts have incompatible posts from the same author that were referred
by other blocks.
At the moment of the SEND *, the receiving host will detect the inconsistency
and will reject * its own sub-tree, as if the nodes have never existed.

This effect is analogous to a fork in BitCoin, which always follows the longest
chain.
Here, the chain with more blocks is the one with more work and prevails.

Back to the example, unfortunately, the only solution here * is a rework from
the authors that had their blocks removed, since these blocks need to be
signed * again to point to the new blocks.

Even consideringmalicious

Mesmo considerando autores maliciosos, acreditamos que forks longos, que exijam
a repostagem de muitos blocos, não serão comuns, pois exigem algumas condições:
- o autor malicioso precisa de reputação
- os dois hosts precisam ficar desconectados tempo suficiente pra os forks
  serem significativos
- e os forks só vão ser significativos se os dois hosts desconectados tiverem
  um fluxo considerável de outros autores
- por fim o autor malicioso precisa ainda identificar essa desconexão entre os
  host em tempo

Com isso tudo acontecendo, a pior das hipótese é que algumas postagens poderão
ser perdidas pq alguns autores não irão realizá-las novamente.

=== 10

Agora vamos considerar o caso de um autor malicioso que quer enganar o sistema
de reputação do Freechains para forjar reps.

Na cadeia *, um autor já * possui uma reputação prévia e depois fica 1 semana *
sem atividade * nenhuma.
No oitavo dia *, ele imediatamente * cria diversas postagens em sequencia *,
como se tivesse postado um bloco a cada dia da semana que passou.
Ele pode fazer isso pq ao se sincronizar na rede, os outros hosts não têm como
saber quando cada postagem aconteceu e tem que aceitar os 7 blocos já
consolidados.
Dessa forma, o autor malicioso obtem * +7 reps de uma vez e pode usá-las
imediatamente *.

=== 11

Pra mitigar esse ataque, o Freechains adota um sistema inflacionário de
reputação: quanto mais blocos existirem em uma sub-árvore, maior e o valor
unitário de um rep, tanto para usar como para coletar.

Em outras palavras, * a unidade de reputação do Freechains é ajustada conforme
a cadeia cresce.
Para saber o valor de um "rep" *, pega-se a altura atual da cadeia e divide-se
esse valor por 10 arredondando pra cima.
Por exemplo, no início, com altura 1, um rep vale uma unidade.
Com altura 23, um rep vai valer 3 e assim em diante.

Vamos ver um exemplo * na prática.
O número 10 dentro do círculo representa uma sub-árvore com altura 10.
Para postar o X1 que vai entrar com altura 11, o autor vai precisar * de 2
unidades e após 24 vai coletar o mesmo valor.
Depois *, um outro autor quer dar um like * em X1 vai precisar de 3 * unidades,
pois a altura já está acima de 20.
Essa nova * postagem também vai precisar de 3 * unidades para ser postada.

Agora * pegando a tentativa de forjar reps, o usuário malicioso consegue postar
uma quantidade N * limitada de blocos, quando comparada a quantidade M * que o
resto da cadeia vai acumular por uma semana inteira de atividade.
Assim, * como M é muito maior do que N, as unidades adiquiridas com N vão ter
efeito insignificante ao serem usadas sobre a cadeia com M, pois o valor da
unidade será bem maior do que o coletado.

=== 12


