=== 1

O Freechains é um sistema peer-to-peer pra disseminação de conteúdo.

==== 2

Conteúdo aqui se refere a todo tipo de informação e interação no nosso
dia-a-dia na internet.
Desde trocas de e-mails e mensagens instantâneas, consumo de notícias,
interações em mídias sociais, e até mesmo backup de documentos ou uso de
aplicativos de celular, por exemplo, pra pedir comida e taxi.

---

Esse conteúdo, ele tem que ser disseminado entre as partes interessadas de
alguma forma.
Então, por exemplo, um site de notícias vai entregar o seu conteúdo a diversos
consumidores, seguindo um padrão assimétrico "1 para N".
Se o site oferecer a opção de comentários e feedback, então a disseminação vai
ocorrer no sentido contrário "N para 1".

Já uma troca de e-mails segue o padrão "1 para 1" de disseminação.
E um fórum público de discussão com diversas pessoas se comunicando entre si,
vai seguir um padrão "N para N" de disseminação.
Nesses últimos dois casos a relação entre as partes é simétrica.

Também é possível haver apenas um produtor e consumidor para a mesma
informação, como no caso do armazenamento de arquivos para backup ou
visualização remota.

---

O Freechains se propõe a oferecer esses padrões de disseminação de conteúdo
em uma arquitetura peer-to-peer, ou seja
  - sem a necessidade de intermediários ou um servidor central pré-determinado
  - sem um sistema centralizado de autoridade que controle o acesso ao conteúdo
  - e, principalmente, sem a necessidade de confiança entre as partes

=== 3

A internet hoje é controlada por pouquíssimas empresas:
- E elas controlam as nossas informações públicas
- Elas coletam informações nossas privadas, mesmo que a gente não queira.
- Elas também decidem grande parte do que a gente vai consumir de informação.
- Em alguns casos, os serviços precisam de conectividade permanente, mesmo pra
  informações que a gente já consumiu alguma vez.
- Por fim, os protocolos e formatos dos dados muitas vezes não são compatíveis
  com padrões abertos, o que dificulta a portabilidade dos dados e a integração
  com serviços de terceiros.

=== 4

Praticamente tudo o que a gente faz hoje na internet, a gente usa seviços
dessas empresas, ou em alguns casos, empresas igualmente gigantes.
E essas empresas tem acesso praticamente irrestrito aos nossos dados:
- As nossas trocas de mensagens.
- Os nossos hábitos e preferências.
- As nossas informações pessoais, muitas vezes confidenciais.
- As nossas interações públicas com amigos e colegas de trabalho.
- Os nossos arquivos e documentos
- Os nossos gastos
- O que a gente vê e escuta
- E até mesmo o que a gente fala
Todos esses nossos dados estão diariamente e ininterruptamente sendo
transmitidos e armazenados na infra-estrutura em nuvem dessas empresas.

=== 5

Aqui tem alguns exemplos da nossa realidade hoje:
- A gente tá numa conversa despretenciosa
    - com o nosso celular por perto
    - e a gente começa receber propagandas relacionadas
    - ou seja, nossos dados privados estão sendo coletados
    - e nosso consumo de informação sendo direcionado
- Aqui eu trabalho em um documento online,
    - mas se a minha conexão cai, a eu perco o acesso a ele
- Aqui estamos fisicamente lado a lado, mas não podemos trocar uma foto
  diretamente
    - a não ser que ela seja transferida pela internet

=== 6

- Eu recebo um link de interesse de um terceiro
    - mas a empresa que intermedia o acesso de um conteúdo que ela não criou
      exige que eu me cadastre a ela
    - ou me encomoda cobrindo 1/3 da minha tela
- Partindo de uma predileção ou padrão meu, eu sou bombardeado com conteúdos
  similares de modo a segurar a minha atenção no serviço.
- Eu me comunico com diversas pessoas, muitas vezes por meios diferentes, mas
  não há como integrar esses meios, mesmo quando eu me comunico com a mesma
  pessoa.
- O mesmo vale para interações públicas em redes sociais.

=== 7

- A internet hoje é extremamente centralizada, muito diferente de como foi
  inicialmente idealizada e de certa forma praticada até 15-20 anos atrás.
- Hoje há uma centralização de dados, infra-estrutura e de poder na mão de
  poucas empresas.

=== 8

Se a gente quer decentralizar esses serviços de disseminação, é interessante
a gente primeiro entender melhor os padrões de comunicações vigentes.
Assim a gente vai poder pegar um serviço qualquer e verificar se ele vai se
enquadrar em um padrão já conhecido e com uma solução distribuída também
conhecida.

Aqui eu classifico os padrões de disseminação em três grupos.
O primeiro se refere a identidade pública de um participante, geralmente um
difusor de conteúdo.
Aqui se enquadram sites de notícias, serviços de streaming, websites e
perfis públicos em redes sociais.
O segundo grupo compreende as comunicações privadas em pares, grupos ou
individuais.
O terceiro grupo se refere aos fórums públicos, tais como sites de perguntas e
respostas, chats, e comércio público.
Esse grupo é o mais complicado de implementar de forma prática, já que os pares
não se conhecem e muitas vezes há usuários maliciosos no meio.

Pegando o primeiro grupo, uma identidade pública quer difundir o seu conteúdo
de modo a atingir um público de interesse.
Esse conteúdo pode ser entendido como uma sequência de mensagens ao longo do
tempo.
Os assinantes também podem prover um feedback ao difusor, opcionalmente.

=== 9

É possível então decentralizar esses padrões de dissmeminação de conteúdo?
Existem diversas questões em sistemas em rede que precisam ser endereçadas,
ainda mais em sistemas distribuídos.

- Os pares conseguem trocar mensagens?
Disponibilidade tipicamente não é um problema em sistemas peer-to-peer,
principalmente em comparação com sistemas centralizados.

- Integridade é a garantia de que a mensagem não vai ser alterada ou que,
pelo menos, uma alteração vai ser detectada pelo destinatário.
- Com autenticidade, o remetente vai poder ser verificado e, além disso, ele
não vai poder negar que enviou a mensagem.
- Confidencialidade é a garantia que o conteúdo não vai ser lido por terceiros,
somente pelo destinatário.
Esse tripé da segurança de informação também é um problema que já foi resolvido
para o caso geral de um sistema distribuído sem relação de confiança entre os
pares.

- As maiores dificuldades estão nos últimos três itens, principalmente para o
padrão N para N de fórums públicos, onde não há um mediador de confiança entre
todos os pares.
AVANÇA
- Como garantir que os todos os pares recebam todas as mensagens e em uma
ordem consistente?
- Como garantir que todos os participantes consigam se comunicar uns com os
outros?
- E como garantir que as mensagens mais importantes se destaquem, ao mesmo
tempo em que mensagens em excesso, SPAM, fake news e conteúdo ilegal não se
sobreponha?

- Para essas questões, nós propomos com o Freechains um sistema de reputação
de mensagens e autores que funciona em conjunto com o que chamamos de
"consenso social".
O sistema de reputação é aplicado de forma autônoma pelo protocolo,
já o consenso social exige intervenção humana para a remoção de conteúdo.

=== 10

Vamos agora olhar mais de perto a comunicação N para N de fórums públicos.

=== 11

A comunicação varia com o tempo e também com a participação de usuários que
postam novos conteúdos.
Aqui, um usuário posta um pergunta e dois outros usuários respondem.
Depois, há uma nova pergunta e outra pergunta, essa que é respondida, que por
sua vez recebe uma reposta em cima.
E assim sucessivamente...

Num sistema centralizado, por exemplo o StackOverflow, essas postagens podem
ser projetadas no tempo e ordenadas por ordem de chegada.
É fácil obter uma ordem total das mensagens em um sistema centralizado.

=== 12-13

Já em um sistema decentralizado, as questões de latência e conectividade podem
gerar ordens de recebimento diferentes em cada par da rede.
Assim, como fazer pra sincronizar os pares ao longo do tempo?
Como saber o que cada um possui e não possui?
E como a gente pode garantir que essas ordens de recebimento não inflijam
nenhuma regra de consistência?
Por exemplo, como garantir que uma resposta não chegue antes da pergunta
correspondente?

=== 14

O Bitcoin também é uma rede de disseminação de conteúdo "N para N" que resolveu
esse problema de consenso distribuído utilizando o conceito de
"Prova de Trabalho".
Como que funciona?

Aqui a gente tem três pares, cada um com uma ordem de recebimento diferente.
A ideia é que a ordem que tiver mais trabalho associado se torne o consenso da
rede.

Os pares da rede separam as postagens recebidas em blocos que são as unidades
de trabalho.
Com um bloco em mãos, o nó usa uma função de hash pré-determinada do protocolo
e começa a combinar o bloco com números aleatórios de entrada e gera números de
saída.
A ideia é que esse novo número de saída tenha uma quantidade mínima de zeros à
esquerda que seja aceito pela rede, por exemplo 4 zeros à esquerda.
As soluções aceitas pela rede são recompensadas, oferecendo o incentivo
necessário para a rede peer-to-peer operar.

Aqui, o primeiro nó conseguiu encontrar os quatro zeros e o terceiro nó
imediatamente aceita a solução.
E ambos começam a trabalhar na próxima solução.
O segundo nó pode ou aceitar o consenso também ou continuar trabalhando na sua
solução atual e na próxima para tentar receber as recompensa.
Só que com o risco de ficar cada vez mais pra trás.
Se ele aceitar e trocar a ordem dele, ele vai ter mais chances de resolver o
próximo bloco e assim em diante...
Ao longo do tempo, dificilmente os blocos mais antigos vão ser alterados,
pois a resposta pra cada bloco novo depende das respostas anteriores, então
elas se tornam cada vez mais estáveis.

Com esse mecanismo, o Bitcoin garante uma ordem total de eventos em um ambiente
totalmente decentralizado.
E resolve um problema central de inconsistência distribuída que nesse contexto
permitiria um usuário gastar o mesmo dinheiro múltiplas vezes.

No entanto, a prática mostra uma enorme concentração de poder computacional em
poucos nós, o que é uma ameaça em potencial para a evolução do sistema.
Esses nós podem controlar o conteúdo dos blocos e em teoria podem negar
transações arbitrariamente, por exemplo.

A ordem total é uma garantia muito forte que talvez não seja necessária em
muitos contextos de disseminação.

Uma outra questão que não se aplica ao BitCoin é a qualidade das mensagens.
O bitcoin apenas transfere valores quantitativos, não havendo nenhuma questão
subjetiva a ser levada em conta.
É um problema diferente do que estamos abordando com o Freechains.

=== 15

As DHTs, tabelas hash distribuídas, são uma outra técnica adotada em
sistemas peer-to-peer.
É a base do BitTorrent, IPFS e outros sistemas modernos.

Cada conteúdo da rede é associado a um identificador único através do seu HASH.
Com esse identificador, a DHT consegue localizar o conteúdo de forma rápia e
escalável.

É um mecanismo muito eficiente para disseminar conteúdos grande e populares.
Por exemplo, filmes e software.

No entanto, como o identificador tem que já ser conhecido, é difícil fazer
buscar e descobrir novos conteúdos.
Arquivos menos populares também tem dificuldade.

E um grande desafio de DHTs é o de manter incentivos suficientes para que os
pares permaneçam armazenando e disseminando os seus arquivos.

=== 16

Pra obter consenso,
O Freechains adota somente um relação de causalidade entre as postagens.

XXX

Essa relação já existe naturalmente pelo tipo de aplicação que a gente utiliza
no nosso dia a dia, como o grafo mostra.
A causalidade só precisa então ser codificada na estrutura de dados do
protocolo.
Além disso, o protocolo também conta com uma estratégia de "melhor esforço",

XXX

ou seja, quando um nó posta um conteúdo novo, ele automaticamente aponta
para o conteúdo que ele já viu...

XXX
XXX
XXX

...mesmo que não exista uma relação semântica entre eles.

Ainda sim, haverá casos de ambiguidade na ordem das postagens, o que faz com
que o Freechains garanta apenas uma ordem parcial dos acontecimentos.

XXX

Nas postagens dentro dos retângulos,

XXX

não é possível determinar qual aconteceu
primeiro, pois vai depender da ordem de recebimento em cada nó da rede.

Note que a estratégia de melhor esforço não oferece muitas garantias.

XXX
XXX

Vamos considerar essa nova postagem aqui em verde que nenhum nó havia visto
ainda. Ela só aponta para uma postagem muito antiga.
Não é possível determinar quando ela realmente ocorreu,

XXX

há todo esse espaço de tempo possível.
A gente não sabe se a postagem vem de um nó que estava muito tempo desconectado
ou se é uma postagem que optou em ignorar a estratégia de melhor esforço por
alguma razão.

Iremos discutir essas considerações mais para frente.

=== 04

O Freechains é XXX um sistema publish-subscribe baseado em tópicos e com
persistência de dados.
Cada tópico XXX-XXX-XXX, chamado de "cadeia"  XXX é uma rede de overlay independente.

A disseminação XXX segue o modelo de "gossip" onde os nós da rede XXX-XXX se comunicam par
a par.  XXX

Como já discutido, XXX o Freechains ordena as postagens dos autores XXX com ordem
parcial de causalidade e melhor esforço.

O Freechains também oferece um sistema XXX de reputação por tópico para
monitormaento da qualidade de forma semi autônoma que ainda será discutido.

=== 05

Na prática, o freechains é um software em separado que a gente vai demonstrar
aqui pela linha de comando.
Cada retângulo é um host, um peer da rede, diferente.

No primeiro host, XXX eu crio um diretório de armazenamento e inicio um daemon
associado àquele diretório em background.
No segundo host, XXX eu faço a mesma coisa.

Em seguida, XXX o primeiro host se associa a duas cadeias com o comando JOIN
e o segundo host também, XXX. Nesse exemplo, eles compartilham uma cadeia em comum.
Como já foi dito, uma cadeia representa uma rede de overlay independente.

Na sequência, XXX as cadeias são usadas ao longo do tempo, com os três
pontinhos, e periodicamente, o host deve disseminar o seu conteúdo a outros
pares com o comando de "SEND".
O mecanismo de disseminação que determina quando e para quem disseminar é
externo ao protocolo mas pode ser definido programaticamente.

Como os nós mantém um daemon em background e as cadeias são persistentes, o
estado dos nós tende a convergir ao longo do tempo.

Também é possível observar a disseminação em tempo real, XXX através do comando
LISTEN que exibe o conteúdo conforme ele chega.

=== 06

O grafo XXX que representa as relações de causalidade entre as postagens é
representado por uma árvore de Merkle, onde cada vértice é chamado de um bloco XXX.

Um bloco XXX contém uma quádrupla XXX com o tempo de criação da postagem, o seu
conteúdo, qual a última postagem do autor e ainda uma lista das postagens
anteriores de acordo com a estratégia de melhor esforço.

O bloco XXX também tem o HASH XXX da quádrupla XXX, que assim identifica
o bloco unicamente.

Também XXX possui uma asinatura digital XXX que autentica o hash XXX e associa
um autor a essa postagem.

XXX

Ao se associar a uma cadeia, o host cria automaticamente um bloco GENESIS XXX,
cujo hash XXX depende somente do nome da cadeia XXX.
Assim, qualquer host que se associe a mesma cadeia, mesmo sem nenhum contato
prévio, terá o mesmo bloco genesis em comum.

Para criar uma nova postagem XXX, um autor usa o comando POST passando a
cadeia, o conteúdo e a sua chave privada para assinar o bloco.

XXX

O próprio software se encarrega de preencher as outras informações do bloco, ou
seja, o tempo de criação e os links para as postagens anteriores.

XXX

Um outro autor pode usar o mesmo host para postar um novo conteúdo XXX, basta
fornecer uma outra chave.

XXX

Para o sistema de reputação, há um comando de LIKE que também precisa ser
assinado e recebe qual postagem deve receber o like XXX

Cada cadeia tem um ponteiro para o seu último bloco XXX.
Como a ordem é parcial, XXX é na verdade um conjunto de cabeças.

=== 07

Aqui nós vemos o estado atual da mesma cadeia em dois hosts diferentes.

O Freechains usa "gossip" XXX para a disseminação, que deve sincronizar as
árvores entre os pares.
O comando SEND XXX envia os blocos de um host para o outro.
O protocolo identifica os blocos em comum XXX, e transfere XXX os blocos
ausentes XXX em uma direção.
Note que aqui XXX, a cadeia contém duas cabeças agora. XXX

Com o passar do tempo, XXX o histórico das cadeias entre todos os pares tende a
convergir.

=== 08

O conteúdo de uma cadeia XXX pode ser acessada através da linha de comando.
XXX
Aqui, a gente pergunta quais são as cabeças XXX atuas da cadeia.
O retorno é o hash XXX que identifica cada uma delas.

XXX

Também é possível consultar um bloco específico de uma cadeia.
O retorno XXX é o JSON do bloco com as informações descritas nos slides
anteriores.

=== 09

Até agora, o que a gente viu do Freechains é o uso padrão de criptografia
em uma rede peer-to-peer não estruturada.

Isso já é suficiente para descrever os padrões de comunicação discutidos,
faltando apenas XXX o sistema de reputação para o caso de fórums públicos.


=== 01

Nessa segunda parte, iremos apresentar o sistema de reputação do Freechains.

=== 02

Existem alguns desafios XXX a serem enfrentados por um sistema de disseminação
de conteúdo, principalmente se ele for decentralizado:
o excesso XXX de informações, a propagação de conteúdo não solicitado XXX como
propagandas, notícias XXX falsas, e conteúdo ilegal XXX como pirataria.

XXX

O Freechains possui um sistema de reputação semi-autônomo para controlar a
qualidade do conteúdo disseminado na rede peer-to-peer.

Contra mensagens em excesso XXX, o Freechains limita a quantidade de postagens
ao penalizar postagens novas sem um espaçamento adequado.
Além disso, XXX o sistema de likes destaca o conteúdo mais relevante dos demais
servindo como um filtro contra o excesso.

Essas duas medidas XXX oferecem oportunidades iguais de comunicação entre os
pares e garantem a qualidade do conteúdo em um sistema distrubuído de
disseminação de conteúdo.
E essas medidas, XXX são controladas diretamente pelo protocolo, sem a
intervenção humana.

Para combater o SPAM XXX, o Freechains exige que o autor de cada nova postagem
tenha uma reputação prévia, assim, somente autores que já tenham efetuado
o mínimo de esforço necessário poderão postar algum SPAM.
Um SPAM eventual, não é um problema grave então essa medida já é suficiente
para a maioria XXX dos casos.

Para combater conteúdo falso e ilegal XXX, já se torna necessário uma
supervisão mais próxima das postagens, uma vez que esse tipo de conteúdo, mesmo
que infrequente, tem um efeito mais nocivo à comunidade.
Nesses casos, a postagem deve ser manualmente XXX banida em cada host do
sistema, o que chamamos de consenso social.
As consequências dessa política não autônoma serão discutidas mais à frente.

=== 03

O sistema de reputação do Freechains contabiliza ao longo do tempo likes e
dislikes * que geram o que a gente chama de "reps" pra autores e postagens.
Esse sistema destaca o conteúdo de qualidade ao mesmo tempo que controla a
atividade dos autores.

A reputação * é criada, gasta e transferida de difersas formas.
Logo de início *, o primeiro autor * que liga uma postagem ao bloco gênesis
* é recompensado com +30 reps *.

No entanto, uma nova postagem * aqui criada * requer uma reputação prévia * e
penaliza o autor com -1 rep *.
Caso o autor não possua a reputação necessária *, o bloco é considerado
bloqueado, aqui indicado em vermelho, até conseguir um like.

Um like * transfere a reputação entre autores.
Aqui, o autor inicial dá um like * na postagem que tinha sido rejeitada *.
Um like retira * 1 rep da origem e soma * 1 rep ao seu alvo.
Uma postagem também pode receber um dislike *, que retira 1 rep da origem e
também desconta 1 rep do alvo.

A postagem agora mudou * de estado aqui em amarelo e permanece em * quarentena
por 2h.
Após 24h * ela se consolida * na cadeia, aqui representado em verde.

Postagens consolidadas recompensam o autor com +1 rep ao mesmo tempo que
elimina a penalidade de -1 rep inicial.
Assim, o autor passa a ter uma reputação positiva * após as primeiras 24 horas.
Postagens consolidadas duram até 90 dias *, sendo que as recompensas nunca
ultrapassam o limite de +30 reps.

Em resumo, o sistema de reputação do Freechains suporta likes e dislikes.
Há duas maneiras de se criar reputação: sendo o primeiro a postar em uma cadeia
ou com uma postagem com mais de 24h horas.
As postagens consolidadas são contabilizadas por 90 dias e acumulam no máximo
+30 reps.
Inicialmente, uma nova postagem desconta -1 rep e permanece em quarentena por
2 horas.
Likes e dislikes transferem reputação entre um autor de origem e uma postagem
qualquer de outro autor. O autor de origem é descontado e o alvo soma ou
subtrai um dependendo se for um like ou dislike.





=== 04

Agora, vamos considerar um exemplo mais completo utilizando a mesma cadeia XXX.

Um novo bloco XXX, primeiro é verificado pelo protocolo XXX:
- se o seu hash bate
- se os blocos anteriores existem
- se a assinatura bate
- e no caso de um like, se o autor tem a reputacao suficiente

Em seguida XXX, ele é aceito imediatamente se for o primeiro bloco ou se for um
like.
Aqui XXX, o primeiro bloco é aceito e o seu autor recompensado XXX.
Os blocos podem também não serem aceitos imediatamente XXX e assim recebem uma
penalização XXX.
Blocos rejeitados não são repassados XXX a outros hosts nas operações de SEND.
Um like posterior XXX, pode transferir a reputação XXX e zerar a reputação de
uma postagem rejeitada XXX, que passa ao estado de quarentena XXX.
Nesse estado XXX, a postagem é repassada a outros hosts, mas ainda não é
referenciada por outras postagens.
Isso permite que a qualidade da postagem seja avaliada antes de ser consolidada
na cadeia.

Uma nova postagem XXX então é criada, dessa vez por um autor com reputação prévia.
Como é uma postagem nova, ela penaliza o autor XXX e também entra em quarentena
XXX.
Após 2h XXX, as postagens em quarentena são finalmente aceitas e passam a ser
referenciadas por postagens novas XXX.
E após 1 dia XXX, essas postagens passam a contar positivamente XXX aos seus
autores.

Agora o novo autor XXX passa a ter reputação suficiente para postar sem XXX
depender de likes de terceiros, mesmo sendo penalizado.
E após mais um dia XXX, passa XXX a acumular uma reputação a mais.

=== 05

Algumas considerações sobre o sistema de reputação

***

- O primeiro autor está 30 dias a frente e molda a cultura inicial da cadeia.
***
- Também só é possível haver um primeiro autor em uma dada cadeia.
  Hosts que discordem, nunca irão se sincronizar.

***

Novos autores necessitam de aprovação inicial da comunidade e obtêem um
crescimento lento.

***

Novas postagens são inicialmente penalizadas.
***
Isso significa que os autores devem medir as palavras
***
Pois o volume de posts não é recompensado, apenas a sua qualidade.

***

Postagens consolidados formam a economia da comunidade, já que são a única
forma de produção.

=== 06

Agora vamos detalhar um pouco mais a trajetória de um novo bloco * em uma cadeia.
Primeiramente *, existem algumas verificações a mais que devem ser feitas:
- se ele ja não foi banido
- se os links de backs além de existirem, foram aceitos e são mais antigos
- se o tempo de criação do bloco não está no futuro
- caso seja a primeira postagem, se ela é única
- caso seja um like, se está assinado e o autor possui reputação
- as postagens de um autor também devem formar uma lista encadeada como será
  discutido mais a frente

Em seguida *, o bloco é direcionada ao seu estado inicial:

***
Ela é imediatamente aceita caso seja a primeira ou caso seja um like
Nesse estado o bloco é repassado aos outros hosts e também é referenciado
por outros blocos imediatamente.

***
Caso o autor possua reputação prévia, o bloco entra no estado de quarentena.
Nesse estado, o bloco é somente repassado a outros hosts para avaliação.

***
Em último caso, o bloco é rejeitado e permanace assim até que obtenha um like
* de terceiros.
Até lá, o bloco nem é repassado a outros hosts.

***
Após duas horas em quarentena, o bloco é aceito.
O tempo de quarentena ainda possui um incremento de uma raíz quadrada que será
explicado a seguir.

***
Há um quarto estado BANIDO * que pode ser alcançado dos outros estados através
de uma operação de BAN que é efetuada manualmente em um host.

=== 07

No slide anterior, a gente viu que o tempo de quarentena tem um fator de
incremento que serve para manter um bloco mais tempo sob suspeita e dar tempo
pra cadeia reagir.

Aqui, um host que recebe um bloco * em quarentena, vai trabalhar com dois
tempos:

O primeiro * é o tempo de criação do bloco que estava sob controle do autor *,
já que ele escolheu o host inicial de postagem.
O segundo * é o tempo local de recebimento do bloco que está sob o controle do
próprio host *.

A diferença * entre esses dois tempos é importante, pois indica um atraso que
pode vir a ser suspeito.
O tempo de quarentena * leva em consideração esse atraso *, e soma a raiz dele
ao tempo total de espera *.
Somente após esse período *, que o bloco é aceito.

Essa tabela *, mosta que para um atraso de 1h30, o tempo de quarentena aumenta
em apenas 10 minutos. Mas para um atraso de 7 dias, o tempo total de quarentena
sobre pra 15 horas.

É importante notar que o tempo de quarentena varia de host para host *, uma vez
que depende do tempo de recebimento local.
Ou seja, os hosts vão convergir em velocidades diferentes.
Aqui *, os hosts estão em estados diferentes e ao enviar * os blocos do host 1
para o host 2 *, o tempo de quarentena * terá que ser respeitado e nem todos os
blocos serão aceitos de uma vez *.

=== 08

O Freechains adota o conceito de consenso social * que exige a manutenção da
cadeia de forma não autônoma.
Ele é necessário para duas tarefas *:
- pra remoção de conteúdo
- e pra manter a linearidade dos blocos de autores
Apesar dos blocos obedecerem a regra mais relaxada de ordem parcial por
causalidade, os posts dos autores precisam manter uma ordem total para evitar
problemas similares ao "double spend" do Bitcoin.
Mas como depende * somente do autor, que é o único que pode criar os seus
próprios blocos, não é uma tarefa penosa.

=== 09

Vamos ilustrar a situação de "gasto duplo" no Freechains *.
Um autor aqui * já possui uma reputação prévia de +1 rep.
A regra geral do Freechains * é de uma árvore, então esse autor poderia usar a
sua reputação em dois * caminhos diferentes *.
No caminho de cima * ele dá um like em uma postagem, e no de baixo * em outra
postagem e assim gasta a sua única reputação duas vezes.

Por isso *, o Freechains exige que os blocos de autores formem uma lista
encadeada.

A mesma situação * pode aparecer de maneira menos artificial com dois hosts
diferentes. Ao sincronizar os hosts *, a mesma situação aparece.

É responsabilidade dos autores * manterem as suas postagens em sequência, o que
pode ser feito sem muita dificuldade usando o mesmo host para postagens ou
dando o intervalo necessário para as suas postagens se propagarem na rede.

E o que acontece * quando o autor não respeita essa regra?

=== 10

Aqui * nós temos essa situação.
Os dois hosts têm postagens de um autor e essas postagens já foram
referenciadas por outras postagens.
No momento do envio *, o recebedor vai detectar a inconsistência e vai rejeitar
* inteiramente a sub-arvore que sucede a postagem.

Se nada for feito, esses dois hosts vão se tornar incompatíveis e vão formar um
fork permanente na cadeia.
A única solução viável aqui * é o retrabalho por parte dos outros autores, ou
seja, um dos dois forks vai ser escolhido *, e os outros autores terão que
repostar os seus blocos novamente.

Essa solução manual é inaceitável no contexto do BitCoin por exemplo *, já que
não existe um senso de comunidade.

Já no Freechains, é um caso possível, mas que na prática exige várias
condições, mesmo considerando autores maliciosos:
- o autor malicioso precisa de reputação
- os dois blocos maliciosos precisam passar pelas quarentenas locais
- os dois hosts precisam ficar desconectados tempo suficiente para os forks
  serem significativos, pq cada nova postagem também vai ter que respeitar a
  sua quarentena
- e os forks só vão ser significativos se os dois hosts desconectados tiverem
  um fluxo considerável de outros autores
- por fim o autor malicioso precisa ainda identificar essa desconexão em tempo

Com isso tudo acontecendo, a pior das hipótese é que algumas postagens poderão
ser perdidas pq alguns autores não irão realizá-las novamente.


=== 11

A remoção de conteúdo é a outra tarefa que depende de consenso social para ser
efetiva.
*
Ela vai ser necessária para eliminar eventuais postagens de SPAM, notícias
falsas, e conteúdo ilegal.

Aqui *, a nossa cadeia recebe * um SPAM que vai ficar em quarentena * por pelo
menos 2 horas. Durante esse tempo, o bloco pode receber likes * e
dislikes * de blocos em paralelo.
O tempo também pode passar * e o bloco começa a ser referenciado por outras
postagens *.

Antes ou depois da sua quarentena *, um bloco pode ser banido através do
comando de BAN. O tempo de quarentena permite que a comunidade opine através
da reputação antes que o bloco comece a ser referenciado.
Mas a decisão final é local e cabe ao host, até porque questões legais
relacionadas ao conteúdo cairão sobre quem armazena o conteúdo.

O bloco banido * e todos os blocos que o sucedem * vão ser removidos da
cadeia também. A remoção é permanente *, a não ser que o comando de UNBAN seja
feito.
Aqui o consenso social aparece novamente *, pois hosts que não concordarem entre
si, se tornarão incompatíveis permanentemente.
Novamente *, esse tipo de consenso é inaceitável em redes que se denominem
auto-gerenciáveis, apesar do hostórico mostrar que eventuais intervenções
externas acontecem.

Uma medida que pode auxiliar na remoção de conteúdo, é criar uma relação de
confiança entre hosts, de tal maneira que quando um host remova um bloco, os
outros hosts o fazem automaticamente.
Essa medida pode ser programada por fora do protocolo sem muitas dificuldades.

=== 12

Existem algumas questões temporais que também exigem uma discussão.
Considerando * a visão de um host em relação a outros existem 3 * tempos
diferentes com visões diferentes.
- O primeiro é o tempo registrado pelo autor na criação do bloco.
  Esse tempo é igual em qualquer host, mas não é um valor confiável pois foi
  uma escolha do autor. Vamos nos referir a esse tempo como IMMUT.
- O segundo é o tempo de recebimento no host. Esse valor é confiável para o
  host, pois foi anotado por ele. Mas é um tempo que varia de host pra host.
  Vamos chamar esse tempo de LOCAL
- O terceiro é o tempo corrente no host. Ele também é confiável, mas é dinãmico.
  Vamos chamá-lo de CUR.

*
Na discussão, nós iremos assumir que os autores e hosts podem ser maliciosos.

Existem 3 * constantes de tempo definidas no protocolo do Freechains:
- Há uma tolerância de 30 minutos com blocos marcados pelo autor no futuro
  em relação ao host. Esse tempo * afeta quais blocos vão estar disponíveis na
  cadeia local do host
- O tempo de quarentena * afeta os blocos que começam a ser referenciados na
  cadeia.
- E o tempo de consolidação * afeta a reputação dos autores.

=== 13

Vamos começar * pelo tempo de tolerância.
O protocolo * assegura que o tempo atual no host tem que se maior ou igual que
o tempo marcado pelo autor menos essa tolerância de 30 minutos
*
Mas quem pode mentir aqui?

Os hosts * podem mentir o seu tempo atual. Isso não importa muito pois na pior
das hipóteses eles vão rejeitar o bloco, o que eles já podem fazer simplesmente
negando o acesso a uma conexão particular.
Os autores * podem escolher um tempo no futuro de criação em relação à
realidade.
Bom, se é 1 hora no host *, o autor pode dizer que é 1 e meia  * onde ele está
e o host vai ser obrigado a aceitar esse bloco.

Essa tolerância existe pra que o protocolo evite lidar com problemas de
sincronização de relógio. Um autor que mente a hora de criação, arrisca não ter
o seu bloco aceito.
E a gente vai ver nos próximos slides que esses 30 minutos não trazem
necessariamente uma vantagem ao autor.

=== 14

O tempo de quarentena * permite que a cadeia reaja a posts suspeitos antes que
ele comece a ser referenciado e se consolide.
Como já vimos, * o tempo de quarentena se baseia na diferença * entre o tempo
de criação pelo autor e recebimento pelo host *.
Essa diferença é adicionada a 2h * com a sua raíz quadrada.
Tem um detalhe a mais omitido que a diferença na verdade usa os tempos dos
links e não os tempos do bloco.
O tempo do autor considera o máximo entre os seus links anteriores *, aqui
representado pelo bloco B.
E o tempo local considera o máximo entre as cabeças do host, aqui representado
pelo bloco X.
Esses tempos são menos dependentes dos autores e hosts e dão mais
confiabilidade a cadeia como veremos a seguir.

O tempo de quarentena * é então expirado quando o tempo atual no host supera
o tempo de recebimento mais o fator de quarentena.

*
E quem pode mentir aqui?

Os hosts * novamente podem os seus tempos, o que no máximo não vai permitir que
os blocos sejam aceitos, algo que ele já pode fazer negando o acesso.

Os autores * decidem quais blocos referenciar, mas é mais vantajoso escolher os
blocos mais novos para dimunir o tempo de quarentena. E isso é o que o
protocolo já faz normalmente.

=== 15

O tempo de consolidação * altera o efeito que uma postagem tem na reputação de
um autor.
Esse efeito depende somente * da diferença entre duas postagens.
Por exemplo, aqui IMMUT' se refere ao tempo de criação de uma nova postagem e
IMMUT se refere a uma postagem anterior.
Se a diferença entre os tempos for superior a 24h então a postagem anterior
vai contar positivamente para a criação da nova postagem.

*
E quem pode mentir aqui?

O autor * precisa aguardar 24h para que uma postagem anterior * conte
positivamente.
Só que esse tempo * ainda não chegou.
O autor pode adiantar * o seu relógio para fingir que o tempo já chegou *.
Assim, * o autor tem um benefício pequeno já que está limitado aos 30 minutos
de tolerância ao futuro.
É importante observar * que os tempos esses tempos são os mesmos em todos os
nós. O autor não vai poder continuar adiantando o seu relógio para postagens
futuras *, pois vai estourar essa a tolerância.

=== 16

Face a essas questões temporais, vamos analisar uma tentativa de forjar
reputação * em uma cadeia do Freechains.

Na cadeia *, um autor já possui uma reputação prévia * e depois fica 1 semana *
sem atividades *.
No oitavo dia *, ela imediatamente * cria diversas postagens em sequencia *,
como se tivesse postado uma a cada dia da semana que passou. *
Assim, ele poderia obter * +7 reps de uma vez para usá-las imediatamente *.

Acontece * que o período de quarentena vai desacelerar esse processo, já que
a diferença de 7 dias *, vai atrasar a primeira postagem em 15 horas *.
E todas as demais vão demorar alguns dias até serem aceitas.

Durante esse período, a cadeia terá tempo suficiente para avaliar se é um
ataque ou simplesmente uma desconexão longa e poderá até * banir logo a
primeira postagem caso pareça maliciosa.
Note que o resto da cadeia não será afetada pois apenas posts do autor
supostamente malicioso serão removidos.

=== 17

Um outro ataque em potencial * é um autor ignorar os dislikes que vier a
receber.
Aqui até esse momento *, o autor possui uma postagem apenas.
A cadeia vai crescendo *, e inclui com um dislike * referenciando o post do
autor.
O autor ignora o resto da cadeia * e continua referenciando apenas os seus
posts, que continuam recebendo dislikes *.
Como o autor nunca referencia a história da cadeia *, os dislikes não são
contabilizados e o autor mantem reputação suficiente para continuar postando
SPAM.

Novamente, * o período de quarentena permite que a cadeia reaja a essa ameaça.
O autor deve espaçar * as novas postagens com uma média de um dia * para evitar
penalizações.
Esse período dá até 7 horas * de quarentena para essas postagens serem
avaliadas.

No entanto, remover * as postagens mais antigaas * tem um custo, pois as
postagens que a sucedem *, também serão removidas.
Por isso, períodos de quarentena maiores levantam suspeita sobre as postagens
ao mesmo tempo que dão mais tempo de ação para as cadeias.

=== 18

Em resumo

O Freechains é um sistema peer-to-peer para a disseminação de conteúdo em
comunidades online.

Ele usa uma arquitetura peer-to-peer não estruturada para a disseminação de
forma decentralizada e pervasiva.

Usa criptografia de chave pública como suporte para a segurança do conteúdo
disseminado.

Se baseia em uma abordagem social semi-autônoma para garantir o consenso nas
comunidades e um sistema de reputação que auxilia na igualdade entre os
participantes e na qualidade do conteúdo.

