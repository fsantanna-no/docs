=== 1

O Freechains é um sistema peer-to-peer pra disseminação de conteúdo.

==== 2

Conteúdo aqui se refere a todo tipo de informação e interação no nosso
dia-a-dia na internet.
Desde trocas de e-mails e mensagens instantâneas, consumo de notícias,
interações em mídias sociais, e até mesmo backup de documentos ou uso de
aplicativos de celular, por exemplo, pra pedir comida e taxi.

---

Esse conteúdo, ele tem que ser disseminado entre as partes interessadas de
alguma forma.
Então, por exemplo, um site de notícias vai entregar o seu conteúdo a diversos
consumidores, seguindo um padrão assimétrico "1 para N".
Se o site oferecer a opção de comentários e feedback, então a disseminação vai
ocorrer no sentido contrário "N para 1".

Já uma troca de e-mails segue o padrão "1 para 1" de disseminação.
E um fórum público de discussão com diversas pessoas se comunicando entre si,
vai seguir um padrão "N para N" de disseminação.
Nesses últimos dois casos a relação entre as partes é simétrica.

Também é possível haver apenas um produtor e consumidor para a mesma
informação, como no caso do armazenamento de arquivos para backup ou
visualização remota.

---

O Freechains se propõe a oferecer esses padrões de disseminação de conteúdo
em uma arquitetura peer-to-peer, ou seja
  - sem a necessidade de intermediários ou um servidor central pré-determinado
  - sem um sistema centralizado de autoridade que controle o acesso ao conteúdo
  - e, principalmente, sem a necessidade de confiança entre as partes

=== 3

A internet hoje é controlada por pouquíssimas empresas:
- E elas controlam as nossas informações públicas
- Elas coletam informações nossas privadas, mesmo que a gente não queira.
- Elas também decidem grande parte do que a gente vai consumir de informação.
- Em alguns casos, os serviços precisam de conectividade permanente, mesmo pra
  informações que a gente já consumiu alguma vez.
- Por fim, os protocolos e formatos dos dados muitas vezes não são compatíveis
  com padrões abertos, o que dificulta a portabilidade dos dados e a integração
  com serviços de terceiros.

=== 4

Praticamente tudo o que a gente faz hoje na internet, a gente usa seviços
dessas empresas, ou em alguns casos, empresas igualmente gigantes.
E essas empresas tem acesso praticamente irrestrito aos nossos dados:
- As nossas trocas de mensagens.
- Os nossos hábitos e preferências.
- As nossas informações pessoais, muitas vezes confidenciais.
- As nossas interações públicas com amigos e colegas de trabalho.
- Os nossos arquivos e documentos
- Os nossos gastos
- O que a gente vê e escuta
- E até mesmo o que a gente fala
Todos esses nossos dados estão diariamente e ininterruptamente sendo
transmitidos e armazenados na infra-estrutura em nuvem dessas empresas.

=== 5

Aqui tem alguns exemplos da nossa realidade hoje:
- A gente tá numa conversa despretenciosa
    - com o nosso celular por perto
    - e a gente começa receber propagandas relacionadas
    - ou seja, nossos dados privados estão sendo coletados
    - e nosso consumo de informação sendo direcionado
- Aqui eu trabalho em um documento online,
    - mas se a minha conexão cai, a eu perco o acesso a ele
- Aqui estamos fisicamente lado a lado, mas não podemos trocar uma foto
  diretamente
    - a não ser que ela seja transferida pela internet

=== 6

- Eu recebo um link de interesse de um terceiro
    - mas a empresa que intermedia o acesso de um conteúdo que ela não criou
      exige que eu me cadastre a ela
    - ou me encomoda cobrindo 1/3 da minha tela
- Partindo de uma predileção ou padrão meu, eu sou bombardeado com conteúdos
  similares de modo a segurar a minha atenção no serviço.
- Eu me comunico com diversas pessoas, muitas vezes por meios diferentes, mas
  não há como integrar esses meios, mesmo quando eu me comunico com a mesma
  pessoa.
- O mesmo vale para interações públicas em redes sociais.

=== 7

- A internet hoje é extremamente centralizada, muito diferente de como foi
  inicialmente idealizada e de certa forma praticada até 15-20 anos atrás.
- Hoje há uma centralização de dados, infra-estrutura e de poder na mão de
  poucas empresas.

=== 8

Se a gente quer decentralizar esses serviços de disseminação, é interessante
a gente primeiro entender melhor os padrões de comunicações vigentes.
Assim a gente vai poder pegar um serviço qualquer e verificar se ele vai se
enquadrar em um padrão já conhecido e com uma solução distribuída também
conhecida.

Aqui eu classifico os padrões de disseminação em três grupos.
O primeiro se refere a identidade pública de um participante, geralmente um
difusor de conteúdo.
Aqui se enquadram sites de notícias, serviços de streaming, websites e
perfis públicos em redes sociais.
O segundo grupo compreende as comunicações privadas em pares, grupos ou
individuais.
O terceiro grupo se refere aos fórums públicos, tais como sites de perguntas e
respostas, chats, e comércio público.
Esse grupo é o mais complicado de implementar de forma prática, já que os pares
não se conhecem e muitas vezes há usuários maliciosos no meio.

Pegando o primeiro grupo, uma identidade pública quer difundir o seu conteúdo
de modo a atingir um público de interesse.
Esse conteúdo pode ser entendido como uma sequência de mensagens ao longo do
tempo.
Os assinantes também podem prover um feedback ao difusor, opcionalmente.

=== 9

É possível então decentralizar esses padrões de dissmeminação de conteúdo?
Existem diversas questões em sistemas em rede que precisam ser endereçadas,
ainda mais em sistemas distribuídos.

- Os pares conseguem trocar mensagens?
Disponibilidade tipicamente não é um problema em sistemas peer-to-peer,
principalmente em comparação com sistemas centralizados.

- Integridade é a garantia de que a mensagem não vai ser alterada ou que,
pelo menos, uma alteração vai ser detectada pelo destinatário.
- Com autenticidade, o remetente vai poder ser verificado e, além disso, ele
não vai poder negar que enviou a mensagem.
- Confidencialidade é a garantia que o conteúdo não vai ser lido por terceiros,
somente pelo destinatário.
Esse tripé da segurança de informação também é um problema que já foi resolvido
para o caso geral de um sistema distribuído sem relação de confiança entre os
pares.

- As maiores dificuldades estão nos últimos três itens, principalmente para o
padrão N para N de fórums públicos, onde não há um mediador de confiança entre
todos os pares.
AVANÇA
- Como garantir que os todos os pares recebam todas as mensagens e em uma
ordem consistente?
- Como garantir que todos os participantes consigam se comunicar uns com os
outros?
- E como garantir que as mensagens mais importantes se destaquem, ao mesmo
tempo em que mensagens em excesso, SPAM, fake news e conteúdo ilegal não se
sobreponha?

- Para essas questões, nós propomos com o Freechains um sistema de reputação
de mensagens e autores que funciona em conjunto com o que chamamos de
"consenso social".
O sistema de reputação é aplicado de forma autônoma pelo protocolo,
já o consenso social exige intervenção humana para a remoção de conteúdo.

=== 10

Vamos agora olhar mais de perto a comunicação N para N de fórums públicos.

=== 11

A comunicação varia com o tempo e também com a participação de usuários que
postam novos conteúdos.
Aqui, um usuário posta um pergunta e dois outros usuários respondem.
Depois, há uma nova pergunta e outra pergunta, essa que é respondida, que por
sua vez recebe uma reposta em cima.
E assim sucessivamente...

Num sistema centralizado, por exemplo o StackOverflow, essas postagens podem
ser projetadas no tempo e ordenadas por ordem de chegada.
É fácil obter uma ordem total das mensagens em um sistema centralizado.

=== 12-13

Já em um sistema decentralizado, as questões de latência e conectividade podem
gerar ordens de recebimento diferentes em cada par da rede.
Assim, como fazer pra sincronizar os pares ao longo do tempo?
Como saber o que cada um possui e não possui?
E como a gente pode garantir que essas ordens de recebimento não inflijam
nenhuma regra de consistência?
Por exemplo, como garantir que uma resposta não chegue antes da pergunta
correspondente?

=== 14

O Bitcoin também é uma rede de disseminação de conteúdo "N para N" que resolveu
esse problema de consenso distribuído utilizando o conceito de
"Prova de Trabalho".
Como que funciona?

Aqui a gente tem três pares, cada um com uma ordem de recebimento diferente.
A ideia é que a ordem que tiver mais trabalho associado se torne o consenso da
rede.

Os pares da rede separam as postagens recebidas em blocos que são as unidades
de trabalho.
Com um bloco em mãos, o nó usa uma função de hash pré-determinada do protocolo
e começa a combinar o bloco com números aleatórios de entrada e gera números de
saída.
A ideia é que esse novo número de saída tenha uma quantidade mínima de zeros à
esquerda que seja aceito pela rede, por exemplo 4 zeros à esquerda.
As soluções aceitas pela rede são recompensadas, oferecendo o incentivo
necessário para a rede peer-to-peer operar.

Aqui, o primeiro nó conseguiu encontrar os quatro zeros e o terceiro nó
imediatamente aceita a solução.
E ambos começam a trabalhar na próxima solução.
O segundo nó pode ou aceitar o consenso também ou continuar trabalhando na sua
solução atual e na próxima para tentar receber as recompensa.
Só que com o risco de ficar cada vez mais pra trás.
Se ele aceitar e trocar a ordem dele, ele vai ter mais chances de resolver o
próximo bloco e assim em diante...
Ao longo do tempo, dificilmente os blocos mais antigos vão ser alterados,
pois a resposta pra cada bloco novo depende das respostas anteriores, então
elas se tornam cada vez mais estáveis.

Com esse mecanismo, o Bitcoin garante uma ordem total de eventos em um ambiente
totalmente decentralizado.
E resolve um problema central de inconsistência distribuída que nesse contexto
permitiria um usuário gastar o mesmo dinheiro múltiplas vezes.

No entanto, a prática mostra uma enorme concentração de poder computacional em
poucos nós, o que é uma ameaça em potencial para a evolução do sistema.
Esses nós podem controlar o conteúdo dos blocos e em teoria podem negar
transações arbitrariamente, por exemplo.

A ordem total é uma garantia muito forte que talvez não seja necessária em
muitos contextos de disseminação.

Uma outra questão que não se aplica ao BitCoin é a qualidade das mensagens.
O bitcoin apenas transfere valores quantitativos, não havendo nenhuma questão
subjetiva a ser levada em conta.
É um problema diferente do que estamos abordando com o Freechains.

=== 15

As DHTs, tabelas hash distribuídas, são uma outra técnica adotada em
sistemas peer-to-peer.
É a base do BitTorrent, IPFS e outros sistemas modernos.

Cada conteúdo da rede é associado a um identificador único através do seu HASH.
Com esse identificador, a DHT consegue localizar o conteúdo de forma rápia e
escalável.

É um mecanismo muito eficiente para disseminar conteúdos grande e populares.
Por exemplo, filmes e software.

No entanto, como o identificador tem que já ser conhecido, é difícil fazer
buscar e descobrir novos conteúdos.
Arquivos menos populares também tem dificuldade.

E um grande desafio de DHTs é o de manter incentivos suficientes para que os
pares permaneçam armazenando e disseminando os seus arquivos.

=== 16

Pra obter consenso,
O Freechains adota somente um relação de causalidade entre as postagens.

XXX

Essa relação já existe naturalmente pelo tipo de aplicação que a gente utiliza
no nosso dia a dia, como o grafo mostra.
A causalidade só precisa então ser codificada na estrutura de dados do
protocolo.
Além disso, o protocolo também conta com uma estratégia de "melhor esforço",

XXX

ou seja, quando um nó posta um conteúdo novo, ele automaticamente aponta
para o conteúdo que ele já viu...

XXX
XXX
XXX

...mesmo que não exista uma relação semântica entre eles.

Ainda sim, haverá casos de ambiguidade na ordem das postagens, o que faz com
que o Freechains garanta apenas uma ordem parcial dos acontecimentos.

XXX

Nas postagens dentro dos retângulos,

XXX

não é possível determinar qual aconteceu
primeiro, pois vai depender da ordem de recebimento em cada nó da rede.

Note que a estratégia de melhor esforço não oferece muitas garantias.

XXX
XXX

Vamos considerar essa nova postagem aqui em verde que nenhum nó havia visto
ainda. Ela só aponta para uma postagem muito antiga.
Não é possível determinar quando ela realmente ocorreu,

XXX

há todo esse espaço de tempo possível.
A gente não sabe se a postagem vem de um nó que estava muito tempo desconectado
ou se é uma postagem que optou em ignorar a estratégia de melhor esforço por
alguma razão.

Iremos discutir essas considerações mais para frente.

=== 04

O Freechains é XXX um sistema publish-subscribe baseado em tópicos e com
persistência de dados.
Cada tópico XXX-XXX-XXX, chamado de "cadeia"  XXX é uma rede de overlay independente.

A disseminação XXX segue o modelo de "gossip" onde os nós da rede XXX-XXX se comunicam par
a par.  XXX

Como já discutido, XXX o Freechains ordena as postagens dos autores XXX com ordem
parcial de causalidade e melhor esforço.

O Freechains também oferece um sistema XXX de reputação por tópico para
monitormaento da qualidade de forma semi autônoma que ainda será discutido.

=== 05

Na prática, o freechains é um software em separado que a gente vai demonstrar
aqui pela linha de comando.
Cada retângulo é um host, um peer da rede, diferente.

No primeiro host, XXX eu crio um diretório de armazenamento e inicio um daemon
associado àquele diretório em background.
No segundo host, XXX eu faço a mesma coisa.

Em seguida, XXX o primeiro host se associa a duas cadeias com o comando JOIN
e o segundo host também, XXX. Nesse exemplo, eles compartilham uma cadeia em comum.
Como já foi dito, uma cadeia representa uma rede de overlay independente.

Na sequência, XXX as cadeias são usadas ao longo do tempo, com os três
pontinhos, e periodicamente, o host deve disseminar o seu conteúdo a outros
pares com o comando de "SEND".
O mecanismo de disseminação que determina quando e para quem disseminar é
externo ao protocolo mas pode ser definido programaticamente.

Como os nós mantém um daemon em background e as cadeias são persistentes, o
estado dos nós tende a convergir ao longo do tempo.

Também é possível observar a disseminação em tempo real, XXX através do comando
LISTEN que exibe o conteúdo conforme ele chega.

=== 06

O grafo XXX que representa as relações de causalidade entre as postagens é
representado por uma árvore de Merkle, onde cada vértice é chamado de um bloco XXX.

Um bloco XXX contém uma quádrupla XXX com o tempo de criação da postagem, o seu
conteúdo, qual a última postagem do autor e ainda uma lista das postagens
anteriores de acordo com a estratégia de melhor esforço.

O bloco XXX também tem o HASH XXX da quádrupla XXX, que assim identifica
o bloco unicamente.

Também XXX possui uma asinatura digital XXX que autentica o hash XXX e associa
um autor a essa postagem.

XXX

Ao se associar a uma cadeia, o host cria automaticamente um bloco GENESIS XXX,
cujo hash XXX depende somente do nome da cadeia XXX.
Assim, qualquer host que se associe a mesma cadeia, mesmo sem nenhum contato
prévio, terá o mesmo bloco genesis em comum.

Para criar uma nova postagem XXX, um autor usa o comando POST passando a
cadeia, o conteúdo e a sua chave privada para assinar o bloco.

XXX

O próprio software se encarrega de preencher as outras informações do bloco, ou
seja, o tempo de criação e os links para as postagens anteriores.

XXX

Um outro autor pode usar o mesmo host para postar um novo conteúdo XXX, basta
fornecer uma outra chave.

XXX

Para o sistema de reputação, há um comando de LIKE que também precisa ser
assinado e recebe qual postagem deve receber o like XXX

Cada cadeia tem um ponteiro para o seu último bloco XXX.
Como a ordem é parcial, XXX é na verdade um conjunto de cabeças.

=== 07

Aqui nós vemos o estado atual da mesma cadeia em dois hosts diferentes.

O Freechains usa "gossip" XXX para a disseminação, que deve sincronizar as
árvores entre os pares.
O comando SEND XXX envia os blocos de um host para o outro.
O protocolo identifica os blocos em comum XXX, e transfere XXX os blocos
ausentes XXX em uma direção.
Note que aqui XXX, a cadeia contém duas cabeças agora. XXX

Com o passar do tempo, XXX o histórico das cadeias entre todos os pares tende a
convergir.

=== 08

O conteúdo de uma cadeia XXX pode ser acessada através da linha de comando.
XXX
Aqui, a gente pergunta quais são as cabeças XXX atuas da cadeia.
O retorno é o hash XXX que identifica cada uma delas.

XXX

Também é possível consultar um bloco específico de uma cadeia.
O retorno XXX é o JSON do bloco com as informações descritas nos slides
anteriores.

=== 09

Até agora XXX, o que a gente viu do Freechains é o uso padrão de criptografia
em uma rede peer-to-peer não estruturada.

Isso já é suficiente para descrever os padrões de comunicação discutidos,
XXX
faltando apenas XXX o sistema de reputação para o caso de fórums públicos.












