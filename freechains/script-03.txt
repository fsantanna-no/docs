=== 01

Essa é a terceira parte do vídeo.

=== 02

Existem alguns desafios * a serem enfrentados por um sistema de disseminação
de conteúdo, principalmente se ele for decentralizado:
o excesso * de informações, a propagação de conteúdo não solicitado * como
propagandas, notícias * falsas, e também conteúdo ilegal * como pirataria.

O Freechains tem um sistema de reputação autônomo pra controlar a qualidade do
conteúdo disseminado na rede peer-to-peer.

Contra mensagens em excesso *, o Freechains limita a quantidade de postagens
ao penalizar postagens novas sem um espaçamento adequado.
Além disso, * o sistema de likes destaca o conteúdo mais relevante servindo
como um filtro contra o excesso.

Essas duas medidas * oferecem oportunidades iguais de comunicação entre os
pares e garantem a qualidade do conteúdo em um sistema distrubuído de
disseminação de conteúdo.

Pra combater SPAM, fake news e conteúdo ilegal, o Freechains adota duas
medidas:
  - Exige * que o autor tenha uma reputação prévia pra postar.
  - E * acompanha a reputação de cada post, podendo até bloquear o conteúdo de
    uma postagem se a quantidade de dislikes superar os likes por um fator de
    2. Por exemplo, se uma postagem tiver 5 likes mas receber 10 dislikes, ela
    será bloqueada.

O uso de likes e dislikes consome a reputação dos autores, então também é um
recurso que tem que ser usado com parcimônia.

=== 03

O sistema de reputação do Freechains contabiliza ao longo do tempo likes e
dislikes * que geram o que a gente chama de "reps" pra autores e postagens.
Esse sistema destaca o conteúdo de qualidade ao mesmo tempo que controla a
atividade dos autores.

A reputação * é criada, gasta e transferida de difersas formas.
Logo de início *, o primeiro autor que liga uma postagem ao bloco gênesis
é recompensado com +30 reps *.

No entanto, a regra pra postagens * após a primeira, ou seja, qualquer conteúdo
novo * requer uma reputação prévia * e penaliza o autor com -1 rep *.
Caso o autor não possua essa reputação prévia necessária *, o bloco é
considerado bloqueado, aqui indicado em vermelho, até conseguir um like.

Likes e dislikes * transferem reputação entre autores.
Aqui *, o autor inicial dá um like * na postagem rejeitada com o comando
"chain like".
Um like retira * 1 rep da origem e soma * 1 rep ao seu alvo.
Uma postagem também pode receber um dislike *, que retira 1 rep da origem e
também desconta 1 rep do alvo.

A postagem bloqueada * agora mudou de estado e passa a ser retransmitida na
rede.

Após 24h *, as postagens se consolidam * na cadeia.
Postagens consolidadas recompensam o autor com +1 rep ao mesmo tempo que
eliminam a penalidade de -1 rep inicial.

Assim, no exemplo, * o autor passa a ter uma reputação positiva após as
primeiras 24 horas.
Agora ele pode usar essa reputação para novas postagens ou pra dar likes e
dislikes em outras postagens.
Postagens consolidadas * duram até 90 dias, sendo que as recompensas nunca
ultrapassam o limite de +30 reps.

Em resumo, o sistema de reputação do Freechains suporta likes e dislikes.
Há duas maneiras de se criar reputação: sendo o primeiro a postar em uma cadeia
ou com postagens com mais de 24h horas.
As postagens consolidadas são contabilizadas por 90 dias e acumulam no máximo
+30 reps.
O Freechains recompensa apenas uma postagem por dia.
Então, se um autor postar 10 mensagens em uma semana, apenas 7 delas contarão
postivamente.
Isso aliado com o desconto de -1 rep por postagem limitam o número de postagens
por autor.
Likes e dislikes transferem reputação entre um autor de origem e uma postagem
qualquer de outro autor. O autor de origem é descontado e o alvo soma ou
subtrai um dependendo se for um like ou dislike.

=== 04

Agora, vamos considerar um exemplo mais completo utilizando a mesma cadeia.

Um novo bloco *, primeiro é verificado pelo protocolo *:
- se o seu hash confere
- se os blocos anteriores existem
- se a assinatura confere
- e no caso de um like, se o autor tem a reputacao suficiente

Em seguida *, ele é aceito imediatamente se for o primeiro bloco ou se autor
tiver reputação.

Aqui *, o primeiro bloco é aceito e o seu autor recompensado é *.
Os blocos * podem também não serem aceitos imediatamente * e assim recebem uma
penalização * de -1 rep.
Blocos rejeitados * não são repassados a outros hosts nos comandos de SEND.
Um like posterior *, pode transferir * a reputação e zerar * a reputação de
uma postagem rejeitada, que passa a ser aceita * na cadeia.

Aqui no exemplo *, o autor incial posta novamente e gasta * mais um rep seu.
Após um dia *, as postagens se consolidam na cadeia e passam a contar
positivamente pros seus autores.
O autor de cima * não só eliminou a penalização de -1 rep como passou a contar
com o like que recebeu e com mais a sua postagem consolidada, contabilizando +2
reps.
O autor inicial, que começou com +30 reps, gastou 1 rep com o like e com a
postagem, mas recuperou 1 rep com a postagem consolidada, voltando aos +29
reps.

A autor de baixo * continua sendo ignorado pela cadeia pois seus blocos não
esão recebendo likes.
Em seguida *, o autor de cima, que já tem reputação, posta um novo conteúdo e
gasta * 1 rep.

Agora *, o autor inicial dá um dislike reduzindo tanto * a sua reputação quanto
* a do autor de cima.
Repare que a postagem em amarelo tem um dislike e nenhum like.
Assim *, o conteúdo dela passa a ficar escondido e não é repassado aos outros
nós da rede.
Mesmo assim, como ela já foi aceita na cadeia, por ter sido postada por um
autor com reputação prévia, a postagem continua na cadeia.
Q quem já viu o seu conteúdo, pode dar likes e dislikes normalmente,
possivelmente mudando a postagem de estado novamente.

Após mais um dia *, as postagens se consolidam, mesmo * as de conteúdo
escondido.
O autor de cima recupera a penalização da postagem nova e ainda ganha +1 rep
da postagem consolidada. Mas como a postagem ganhou um dislike, o autor se
mantém com a reputação do dia anterior.

=== 05

Agora vamos detalhar um pouco mais a trajetória de um novo bloco * em uma
cadeia.
Primeiramente *, existem algumas verificações a mais que devem ser feitas:
- se os links de backs além de existirem, foram aceitos e são mais antigos
- se o tempo de criação do bloco não está no futuro
- caso seja a primeira postagem, se ela é única
- caso seja um like, se está assinado e o autor possui reputação
- as postagens de um autor também devem formar uma lista encadeada como será
  discutido mais a frente

Em seguida *, a postagem é direcionada ao seu estado inicial:

Ela é imediatamente aceita * caso seja a primeira ou autor tenha reputação.
Nesse estado o bloco é repassado aos outros hosts e também é referenciado
por outros blocos imediatamente.

Caso contrário *, o bloco fica bloqueado * e permanace assim até que obtenha um
like * de terceiros.
Até lá, o bloco nem é repassado a outros hosts.

O conteúdo de blocos aceitos ainda podem a qualquer momento ser escondido *.
Isso acontece sempre * que o número de dislikes superar o número de likes * por
um fator de 2.

Na primeiras 24 horas * de um bloco, ele conta negativamente * para a reputação
do autor.
Isso impede que autores com pouca reputação postem em excesso.

Após 24 horas *, o bloco é consolidado e passa * a contar positivamente para o
autor.
Ainda assim, o bloco está sujeito ao sistema de reputação e o seu conteúdo
pode ser escondido caso tenha muitos dislikes.

== 06

A reputação das postagens e autores são contabilizadas em separado e também de
maneira diferente.

Para uma postagem *, o Freechains conta * os likes e dislikes que acontecem
após o seu bloco.
Aqui * temos uma postagem que queremos saber a reputação.
Só olhamos para frente *, e apenas * para os posts que se ligam direta ou
indiretamente ao bloco de interesse.

A reputação de um post tem dois objetivos:
  - indicar * a sua qualidade para os usuários, que podem usá-la para filtrar ou
    ordenar o seu consumo de conteúdo
  - a reputação * também afeta o estado do bloco, uma vez que blocos com muitos
    dislikes têm o seu conteúdo escondido da cadeia

Uma questão central do sistema de reputação do Freechains é que a reputação de
um bloco depende somente do que está à sua frente *.
Isso implica que diferentes hosts poderão divergir temporariamente sobre o
estado do bloco.
Uns poderão achar que o bloco está aceito e outros que o conteúdo do bloco deve
ficar escondido.
Isso não é um problema, pois vai afetar apenas temporariamente se o conteúdo do
bloco vai ser entregue ou não.
Eventualmente, blocos com muitos dislikes vão ter o seu conteúdo escondido
corretamente.
É importante destacar que um host não pode escolher arbitrariamente se vai ou
não repassar o conteúdo de um bloco, pois o outro par vai querer uma prova
sobre o real estado do bloco.
Essa prova não pode ser forjada pois depende dos likes que foram assinados por
autores com reputação verificada.

=== 07

No slide anterior, a gente viu que o tempo de quarentena tem um fator de
incremento que serve pra manter um bloco mais tempo sob suspeita e dar tempo
pra cadeia reagir.

Aqui, um host que recebe um bloco * em quarentena, vai trabalhar com dois
tempos:

O primeiro * é o tempo de criação do bloco que estava sob controle do autor *,
já que ele escolheu o host inicial de postagem.
O segundo * é o tempo local de recebimento do bloco que está sob o controle do
próprio host *.

A diferença * entre esses dois tempos é importante, pois indica um atraso que
pode vir a ser suspeito.
O tempo de quarentena * leva em consideração esse atraso *, e soma a raiz dele
ao tempo total de espera *.
Somente após esse período *, que o bloco é aceito.

Essa tabela *, mosta que pra um atraso de 1h30, o tempo de quarentena aumenta
em apenas 10 minutos. Mas pra um atraso de 7 dias, o tempo total de quarentena
sobre pra 15 horas.

É importante notar que o tempo de quarentena varia de host pra host *, uma vez
que depende do tempo de recebimento local.
Ou seja, os hosts vão convergir em velocidades diferentes.
Aqui *, os hosts estão em estados diferentes e ao enviar * os blocos do host 1
pra o host 2 *, o tempo de quarentena * terá que ser respeitado e nem todos os
blocos serão aceitos de uma vez *.

=== 08

O Freechains adota o conceito de consenso social * que exige a manutenção da
cadeia de forma não autônoma.
Ele é necessário pra duas tarefas *:
- pra remoção de conteúdo
- e pra manter a linearidade dos blocos de autores
Apesar dos blocos obedecerem a regra mais relaxada de ordem parcial por
causalidade, os posts dos autores precisam manter uma ordem total pra evitar
problemas similares ao "double spend" do Bitcoin.
Mas como depende * somente do autor, que é o único que pode criar os seus
próprios blocos, não é uma tarefa penosa.

=== 09

Vamos ilustrar a situação de "gasto duplo" no Freechains *.
Um autor aqui * já possui uma reputação prévia de +1 rep.
A regra geral do Freechains * é de uma árvore, então esse autor poderia usar a
sua reputação em dois * caminhos diferentes *.
No caminho de cima * ele dá um like em uma postagem, e no de baixo * em outra
postagem e assim gasta a sua única reputação duas vezes.

Por isso *, o Freechains exige que os blocos de autores formem uma lista
encadeada.

A mesma situação * pode aparecer de maneira menos artificial com dois hosts
diferentes. Ao sincronizar os hosts *, a mesma situação aparece.

É responsabilidade dos autores * manterem as suas postagens em sequência, o que
pode ser feito sem muita dificuldade usando o mesmo host pra postagens ou
dando o intervalo necessário pra as suas postagens se propagarem na rede.

E o que acontece * quando o autor não respeita essa regra?

=== 10

Aqui * nós temos essa situação.
Os dois hosts têm postagens de um autor e essas postagens já foram
referenciadas por outras postagens.
No momento do envio *, o recebedor vai detectar a inconsistência e vai rejeitar
* inteiramente a sub-arvore que sucede a postagem.

Se nada for feito, esses dois hosts vão se tornar incompatíveis e vão formar um
fork permanente na cadeia.
A única solução viável aqui * é o retrabalho por parte dos outros autores, ou
seja, um dos dois forks vai ser escolhido *, e os outros autores terão que
repostar os seus blocos novamente.

Essa solução manual é inaceitável no contexto do BitCoin por exemplo *, já que
não existe um senso de comunidade.

Já no Freechains, é um caso possível, mas que na prática exige várias
condições, mesmo considerando autores maliciosos:
- o autor malicioso precisa de reputação
- os dois blocos maliciosos precisam passar pelas quarentenas locais
- os dois hosts precisam ficar desconectados tempo suficiente pra os forks
  serem significativos, pq cada nova postagem também vai ter que respeitar a
  sua quarentena
- e os forks só vão ser significativos se os dois hosts desconectados tiverem
  um fluxo considerável de outros autores
- por fim o autor malicioso precisa ainda identificar essa desconexão em tempo

Com isso tudo acontecendo, a pior das hipótese é que algumas postagens poderão
ser perdidas pq alguns autores não irão realizá-las novamente.


=== 11

A remoção de conteúdo é a outra tarefa que depende de consenso social pra ser
efetiva.
*
Ela vai ser necessária pra eliminar eventuais postagens de SPAM, notícias
falsas, e conteúdo ilegal.

Aqui *, a nossa cadeia recebe * um SPAM que vai ficar em quarentena * por pelo
menos 2 horas. Durante esse tempo, o bloco pode receber likes * e
dislikes * de blocos em paralelo.
O tempo também pode passar * e o bloco começa a ser referenciado por outras
postagens *.

Antes ou depois da sua quarentena *, um bloco pode ser banido através do
comando de BAN. O tempo de quarentena permite que a comunidade opine através
da reputação antes que o bloco comece a ser referenciado.
Mas a decisão final é local e cabe ao host, até porque questões legais
relacionadas ao conteúdo cairão sobre quem armazena o conteúdo.

O bloco banido * e todos os blocos que o sucedem * vão ser removidos da
cadeia também. A remoção é permanente *, a não ser que o comando de UNBAN seja
feito.
Aqui o consenso social aparece novamente *, pois hosts que não concordarem entre
si, se tornarão incompatíveis permanentemente.
Novamente *, esse tipo de consenso é inaceitável em redes que se denominem
auto-gerenciáveis, apesar do hostórico mostrar que eventuais intervenções
externas acontecem.

Uma medida que pode auxiliar na remoção de conteúdo, é criar uma relação de
confiança entre hosts, de tal maneira que quando um host remova um bloco, os
outros hosts o fazem automaticamente.
Essa medida pode ser programada por fora do protocolo sem muitas dificuldades.

=== 12

Existem algumas questões temporais que também exigem uma discussão.
Considerando * a visão de um host em relação a outros existem 3 * tempos
diferentes com visões diferentes.
- O primeiro é o tempo registrado pelo autor na criação do bloco.
  Esse tempo é igual em qualquer host, mas não é um valor confiável pois foi
  uma escolha do autor. Vamos nos referir a esse tempo como IMMUT.
- O segundo é o tempo de recebimento no host. Esse valor é confiável pra o
  host, pois foi anotado por ele. Mas é um tempo que varia de host pra host.
  Vamos chamar esse tempo de LOCAL
- O terceiro é o tempo corrente no host. Ele também é confiável, mas é dinãmico.
  Vamos chamá-lo de CUR.

*
Na discussão, nós iremos assumir que os autores e hosts podem ser maliciosos.

Existem 3 * constantes de tempo definidas no protocolo do Freechains:
- Há uma tolerância de 30 minutos com blocos marcados pelo autor no futuro
  em relação ao host. Esse tempo * afeta quais blocos vão estar disponíveis na
  cadeia local do host
- O tempo de quarentena * afeta os blocos que começam a ser referenciados na
  cadeia.
- E o tempo de consolidação * afeta a reputação dos autores.

=== 13

Vamos começar * pelo tempo de tolerância.
O protocolo * assegura que o tempo atual no host tem que se maior ou igual que
o tempo marcado pelo autor menos essa tolerância de 30 minutos
*
Mas quem pode mentir aqui?

Os hosts * podem mentir o seu tempo atual. Isso não importa muito pois na pior
das hipóteses eles vão rejeitar o bloco, o que eles já podem fazer simplesmente
negando o acesso a uma conexão particular.
Os autores * podem escolher um tempo no futuro de criação em relação à
realidade.
Bom, se é 1 hora no host *, o autor pode dizer que é 1 e meia  * onde ele está
e o host vai ser obrigado a aceitar esse bloco.

Essa tolerância existe pra que o protocolo evite lidar com problemas de
sincronização de relógio. Um autor que mente a hora de criação, arrisca não ter
o seu bloco aceito.
E a gente vai ver nos próximos slides que esses 30 minutos não trazem
necessariamente uma vantagem ao autor.

=== 14

O tempo de quarentena * permite que a cadeia reaja a posts suspeitos antes que
ele comece a ser referenciado e se consolide.
Como já vimos, * o tempo de quarentena se baseia na diferença * entre o tempo
de criação pelo autor e recebimento pelo host *.
Essa diferença é adicionada a 2h * com a sua raíz quadrada.
Tem um detalhe a mais omitido que a diferença na verdade usa os tempos dos
links e não os tempos do bloco.
O tempo do autor considera o máximo entre os seus links anteriores *, aqui
representado pelo bloco B.
E o tempo local considera o máximo entre as cabeças do host, aqui representado
pelo bloco X.
Esses tempos são menos dependentes dos autores e hosts e dão mais
confiabilidade a cadeia como veremos a seguir.

O tempo de quarentena * é então expirado quando o tempo atual no host supera
o tempo de recebimento mais o fator de quarentena.

*
E quem pode mentir aqui?

Os hosts * novamente podem os seus tempos, o que no máximo não vai permitir que
os blocos sejam aceitos, algo que ele já pode fazer negando o acesso.

Os autores * decidem quais blocos referenciar, mas é mais vantajoso escolher os
blocos mais novos pra dimunir o tempo de quarentena. E isso é o que o
protocolo já faz normalmente.

=== 15

O tempo de consolidação * altera o efeito que uma postagem tem na reputação de
um autor.
Esse efeito depende somente * da diferença entre duas postagens.
Por exemplo, aqui IMMUT' se refere ao tempo de criação de uma nova postagem e
IMMUT se refere a uma postagem anterior.
Se a diferença entre os tempos for superior a 24h então a postagem anterior
vai contar positivamente pra a criação da nova postagem.

*
E quem pode mentir aqui?

O autor * precisa aguardar 24h pra que uma postagem anterior * conte
positivamente.
Só que esse tempo * ainda não chegou.
O autor pode adiantar * o seu relógio pra fingir que o tempo já chegou *.
Assim, * o autor tem um benefício pequeno já que está limitado aos 30 minutos
de tolerância ao futuro.
É importante observar * que os tempos esses tempos são os mesmos em todos os
nós. O autor não vai poder continuar adiantando o seu relógio pra postagens
futuras *, pois vai estourar essa a tolerância.

=== 16

Face a essas questões temporais, vamos analisar uma tentativa de forjar
reputação * em uma cadeia do Freechains.

Na cadeia *, um autor já possui uma reputação prévia * e depois fica 1 semana *
sem atividades *.
No oitavo dia *, ela imediatamente * cria diversas postagens em sequencia *,
como se tivesse postado uma a cada dia da semana que passou. *
Assim, ele poderia obter * +7 reps de uma vez pra usá-las imediatamente *.

Acontece * que o período de quarentena vai desacelerar esse processo, já que
a diferença de 7 dias *, vai atrasar a primeira postagem em 15 horas *.
E todas as demais vão demorar alguns dias até serem aceitas.

Durante esse período, a cadeia terá tempo suficiente pra avaliar se é um
ataque ou simplesmente uma desconexão longa e poderá até * banir logo a
primeira postagem caso pareça maliciosa.
Note que o resto da cadeia não será afetada pois apenas posts do autor
supostamente malicioso serão removidos.

=== 17

Um outro ataque em potencial * é um autor ignorar os dislikes que vier a
receber.
Aqui até esse momento *, o autor possui uma postagem apenas.
A cadeia vai crescendo *, e inclui com um dislike * referenciando o post do
autor.
O autor ignora o resto da cadeia * e continua referenciando apenas os seus
posts, que continuam recebendo dislikes *.
Como o autor nunca referencia a história da cadeia *, os dislikes não são
contabilizados e o autor mantem reputação suficiente pra continuar postando
SPAM.

Novamente, * o período de quarentena permite que a cadeia reaja a essa ameaça.
O autor deve espaçar * as novas postagens com uma média de um dia * pra evitar
penalizações.
Esse período dá até 7 horas * de quarentena pra essas postagens serem
avaliadas.

No entanto, remover * as postagens mais antigaas * tem um custo, pois as
postagens que a sucedem *, também serão removidas.
Por isso, períodos de quarentena maiores levantam suspeita sobre as postagens
ao mesmo tempo que dão mais tempo de ação pra as cadeias.

=== 18

Em resumo

O Freechains é um sistema peer-to-peer pra a disseminação de conteúdo em
comunidades online.

Ele usa uma arquitetura peer-to-peer não estruturada pra a disseminação de
forma decentralizada e pervasiva.

Usa criptografia de chave pública como suporte pra a segurança do conteúdo
disseminado.

Se baseia em uma abordagem social semi-autônoma pra garantir o consenso nas
comunidades e um sistema de reputação que auxilia na igualdade entre os
participantes e na qualidade do conteúdo.

----- OLD -----

=== 4

Praticamente tudo o que a gente faz hoje na internet, a gente usa seviços
dessas empresas, ou em alguns casos, empresas igualmente gigantes.
E essas empresas tem acesso praticamente irrestrito aos nossos dados:
- As nossas trocas de mensagens.
- Os nossos hábitos e preferências.
- As nossas informações pessoais, muitas vezes confidenciais.
- As nossas interações públicas com amigos e colegas de trabalho.
- Os nossos arquivos e documentos
- Os nossos gastos
- O que a gente vê e escuta
- E até mesmo o que a gente fala
Todos esses nossos dados estão diariamente e ininterruptamente sendo
transmitidos e armazenados na infra-estrutura em nuvem dessas empresas.

=== 5

Aqui tem alguns exemplos da nossa realidade hoje:
- A gente tá numa conversa despretenciosa
    - com o nosso celular por perto
    - e a gente começa receber propagandas relacionadas
    - ou seja, nossos dados privados estão sendo coletados
    - e nosso consumo de informação sendo direcionado
- Aqui eu trabalho em um documento online,
    - mas se a minha conexão cai, a eu perco o acesso a ele
- Aqui estamos fisicamente lado a lado, mas não podemos trocar uma foto
  diretamente
    - a não ser que ela seja transferida pela internet

=== 6

- Eu recebo um link de interesse de um terceiro
    - mas a empresa que intermedia o acesso de um conteúdo que ela não criou
      exige que eu me cadastre a ela
    - ou me encomoda cobrindo 1/3 da minha tela
- Partindo de uma predileção ou padrão meu, eu sou bombardeado com conteúdos
  similares de modo a segurar a minha atenção no serviço.
- Eu me comunico com diversas pessoas, muitas vezes por meios diferentes, mas
  não há como integrar esses meios, mesmo quando eu me comunico com a mesma
  pessoa.
- O mesmo vale pra interações públicas em redes sociais.


