=== 01

This is the second part of the video.

=== 02

Freechains * is a topic-based publish-subscribe system with data persistence.
In other words, we have topics * or groups * represented here by the planes *.
We call * them as "chains".
And when a participant posts a content to a chain, all other participants
subscribed to that chain will receive the post.
We consider the chains to be persistent because from a given post it is
possible to reach all other posts from the past.

The dissemination * follows a "gossip" model in which the peers in the network
*, each one here represetned * as a rectangle, communicate peer * by peer.

As we already discussead *, Freechains order the authors' * posts with a
happened-before relation with best effort.
Events that have a cause and effect, for example *, a question followed by its
answer will always have the order preserved.
But independent events, for example * two answers for the same question, might
be delivered in different orders by the peers in the network.

Our main contribution with Freechains * is a decentralized reputation system to
be presented.
Each chains has its own independent system to keep the quality of posts and
authors.

=== 03

In practice, * Freechains is an open-source software that can be downloaded
and installed on a computer or mobile phone.

Freechains * executes in the background as a server or daemon that listens to
loca user * requests and communicates * with other peers in the network.

The daemon * can be accessed in three equivalent ways:
- from * the command line, which we will use in the rest of the presentation
- from * an API em Kotlin, which can be used to create applications on top of
  Freechains
- or yet * directly from a textual protocol that permits to use other languages
  via sockets.

=== 04

Let's now use "freechains" * from the command line in Linux.
The command "host create" initializes * a local file structure of a host in the
given directory.
This command only needs to be executed once.

Then *, we start the daemon in background with the command "host start"
passing the directory of creation.
Now * users can connect and issue commands to Freechains.

The same commands * can be execute in other machines * locally to prepare the
network, but there's still no communication among them.

=== 05

Now let's give an example of communication using a public identity.
That is, an author *, for example a news site, wants to broadcast its content *
for a target * public, which can provide * some feedback.

=== 06

First *, we need to create a pair of keys for the author.
The command "crypto create" derives a public and private key from the given
passphrase.
The answer * is a pair of keys: a public shorter and a private longer, which
should be kept safe in secret.
The public key is the identity of this author and should be shared with its
target audience.
Whenever a post has this public signature, it means that it was posted by the
user holding the private key.

Now *, we use the command "chain join" to create a chain locally *.
Here, the command receives two arguments that are almost the same.
The first is the name of the chain that always starts with a slash.
The second argument is the public key associated with the chain.
This chain was created so that this user can disseminate its content for other
participants.
We use the key in the name of the chains as a convenience, since the other
users already need to know the public key.

Chains for public identities are not the only kind of chains.
The next command * create the chain "slash chat" withouth any associated public
key.
This kind of chain will be used in N-to-N communication that we will discuss in
the future.

Going back * to the public identity chain, we call its owner who controls the
private key.
The owner has infinite reputation and can moderate the content of the chain.

Now, let's consider another user that uses the same * command to join the chain
in another host *, creating the same chain * locally.
This user doesn't have the private key, so he's a consumer in the 1-to-N
communication pattern.

Even if the chains were created in different hosts independently, they chains
are the same because they were created with the same arguments.
We can verify that with the command "chain genesis" *, which reads the first
post the exists in the chain implicitly.
We call this post as the "genesis block" and obtain as an answer * its hash
code.
We can verify that this hash code will be the same in any host for a given
chains.
Here *, we have a diagram of the chain with the genesis block.

Finally, we post a new content * using the private key.
The command "chain post" creates a new post locally and points * to the set of
existing blocks in the chains to comply with the best-effort strategy.
The prefixes "0_" e "1_" in the blocks indicate their height in the chain.
In the command, the contents are passed "inline" as "Hello World!".
It's also possible to give a file name here.
The post is signed with the given private key.

The state of the chain is local and the content were not disseminated yet.

=== 07

Let's recreate the steps of the previous slide with some more context.
Our author *, Mary, is connected * to a computer with Freechains.
First *, she creates an identity * with the command "crypto create".
Then, she discloses her public key and hides her private key.

She then uses the command * "chain join" to subscribe * her chain in the host
already with the "genesis * block".

The *, Mary posts a new message on the chain with the command "chain post" and
uses her private key to sign it.

By other means *, Mary reveals only her public key to John *, which is
connected in another machine * to Freechains.
As the identity of Mary is public, John can forward * it to his friends that
might be interested in content of Mary, even without knowing her.

These other users * now can use the command "join" to also subscribe to Mary's
* chain.
Mary can also have another computer * at work or her own phone which can be
used alternativelly, even as a backup of her chain.

Finally, to disseminate the chain content, Mary uses the command "chain send"
*, which will send all blocks that the destiny still doesn't have *.
John must also forward * the content, since Mary is not in touch with all of
her followers.
This is exactly the proccess of "gossip" * among the peers in the network.

As a last observation, the machine that Mary used to post the message doesn't
have any kind of priviledge.
The only authority here is her private key.
She could use * it in another machine in the same way.

=== 08

Now let's exemplify communication in public forums.
That is, authors do not know each other, there's no supreme authority over
the chains, and it's possible that there are malicious users.

=== 09

A publich chain is moderated by its autonomous reputation system with input of
its users.

John * likes to cook and had the idea * to create a chain in Freechains to
share recipes.
He immediately posts * a description for the group with his signature and
invites * other friends to participate.
Since he signed the first block, the reputation system awards John with +30
"reps" * which is the unit of reputation.

A question that can be raised soon is that another user * anywhere in the world
could have the same idea and also wants the +30 reps.
In fact, names are free since there's no centralized registry.
For Freechains, these chains could co-exist unless they need to synchronize at
any point.
That is, if Alan * tries to synchronize with John, the operation will fail.
Chains with different first blocks never synchronize.

Going back * to John's chain, Mary tries to post * a new recipe, which enters
at the head * of the chain.
But since Mary has no reputation, the block is initially blocked and waits for
a LIKE to be accepted.
For now, only John can approve new blocks.
He aproves the content and gives a LIKE * in Mary's post, which is now accepted
in the chain.
This reputation is transferred * between the two authors.
John receives a minus one rep and Mary recieves a plus one rep.
However, new posts count negativelly for its author for 24 hours.
So *, Mary is still penalized with minus 1 rep what prevents her to post again.
After 24 hours, the post becomes positive * and Mary now has + 2 reps which she
can use to post or moderate other posts.

=== 10

Algumas considerações sobre o sistema de reputação

***

- O primeiro autor está 30 dias a frente e molda a cultura inicial da cadeia.
***
- Também só é possível haver um primeiro autor em uma dada cadeia.
  Hosts que discordem, nunca irão se sincronizar.

***

Novos autores necessitam de aprovação inicial da comunidade e obtêem um
crescimento lento.

***

Novas postagens são inicialmente penalizadas.
***
Isso significa que os autores devem medir as palavras
***
Pois o volume de posts não é recompensado, apenas a sua qualidade.

***

Postagens consolidados formam a economia da comunidade, já que são a única
forma de produção, mas ainda estão sujeitas a moderação posterior.

=== 11

No próximo vídeo, vamos detalhar melhor o sistema de reputação.
